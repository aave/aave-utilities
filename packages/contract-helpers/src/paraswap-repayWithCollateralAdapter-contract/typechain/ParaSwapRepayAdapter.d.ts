/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ParaSwapRepayAdapterInterface extends ethers.utils.Interface {
  functions: {
    'ADDRESSES_PROVIDER()': FunctionFragment;
    'AUGUSTUS_REGISTRY()': FunctionFragment;
    'MAX_SLIPPAGE_PERCENT()': FunctionFragment;
    'ORACLE()': FunctionFragment;
    'POOL()': FunctionFragment;
    'executeOperation(address[],uint256[],uint256[],address,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescueTokens(address)': FunctionFragment;
    'swapAndRepay(address,address,uint256,uint256,uint256,uint256,bytes,tuple)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'ADDRESSES_PROVIDER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'AUGUSTUS_REGISTRY',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_SLIPPAGE_PERCENT',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'ORACLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POOL', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'executeOperation',
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rescueTokens',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapAndRepay',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'ADDRESSES_PROVIDER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'AUGUSTUS_REGISTRY',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_SLIPPAGE_PERCENT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'ORACLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POOL', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'executeOperation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rescueTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapAndRepay',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  events: {
    'Bought(address,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Swapped(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Bought'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swapped'): EventFragment;
}

export type BoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    fromAsset: string;
    toAsset: string;
    amountSold: BigNumber;
    receivedAmount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    fromAsset: string;
    toAsset: string;
    fromAmount: BigNumber;
    receivedAmount: BigNumber;
  }
>;

export class ParaSwapRepayAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParaSwapRepayAdapterInterface;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    AUGUSTUS_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    MAX_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    POOL(overrides?: CallOverrides): Promise<[string]>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    swapAndRepay(
      collateralAsset: string,
      debtAsset: string,
      collateralAmount: BigNumberish,
      debtRepayAmount: BigNumberish,
      debtRateMode: BigNumberish,
      buyAllBalanceOffset: BigNumberish,
      paraswapData: BytesLike,
      permitSignature: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  AUGUSTUS_REGISTRY(overrides?: CallOverrides): Promise<string>;

  MAX_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  POOL(overrides?: CallOverrides): Promise<string>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    initiator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rescueTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  swapAndRepay(
    collateralAsset: string,
    debtAsset: string,
    collateralAmount: BigNumberish,
    debtRepayAmount: BigNumberish,
    debtRateMode: BigNumberish,
    buyAllBalanceOffset: BigNumberish,
    paraswapData: BytesLike,
    permitSignature: {
      amount: BigNumberish;
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    AUGUSTUS_REGISTRY(overrides?: CallOverrides): Promise<string>;

    MAX_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    POOL(overrides?: CallOverrides): Promise<string>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueTokens(token: string, overrides?: CallOverrides): Promise<void>;

    swapAndRepay(
      collateralAsset: string,
      debtAsset: string,
      collateralAmount: BigNumberish,
      debtRepayAmount: BigNumberish,
      debtRateMode: BigNumberish,
      buyAllBalanceOffset: BigNumberish,
      paraswapData: BytesLike,
      permitSignature: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Bought(address,address,uint256,uint256)'(
      fromAsset?: string | null,
      toAsset?: string | null,
      amountSold?: null,
      receivedAmount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromAsset: string;
        toAsset: string;
        amountSold: BigNumber;
        receivedAmount: BigNumber;
      }
    >;

    Bought(
      fromAsset?: string | null,
      toAsset?: string | null,
      amountSold?: null,
      receivedAmount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromAsset: string;
        toAsset: string;
        amountSold: BigNumber;
        receivedAmount: BigNumber;
      }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'Swapped(address,address,uint256,uint256)'(
      fromAsset?: string | null,
      toAsset?: string | null,
      fromAmount?: null,
      receivedAmount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromAsset: string;
        toAsset: string;
        fromAmount: BigNumber;
        receivedAmount: BigNumber;
      }
    >;

    Swapped(
      fromAsset?: string | null,
      toAsset?: string | null,
      fromAmount?: null,
      receivedAmount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        fromAsset: string;
        toAsset: string;
        fromAmount: BigNumber;
        receivedAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    AUGUSTUS_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    swapAndRepay(
      collateralAsset: string,
      debtAsset: string,
      collateralAmount: BigNumberish,
      debtRepayAmount: BigNumberish,
      debtRateMode: BigNumberish,
      buyAllBalanceOffset: BigNumberish,
      paraswapData: BytesLike,
      permitSignature: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    AUGUSTUS_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SLIPPAGE_PERCENT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      initiator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rescueTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    swapAndRepay(
      collateralAsset: string,
      debtAsset: string,
      collateralAmount: BigNumberish,
      debtRepayAmount: BigNumberish,
      debtRateMode: BigNumberish,
      buyAllBalanceOffset: BigNumberish,
      paraswapData: BytesLike,
      permitSignature: {
        amount: BigNumberish;
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
