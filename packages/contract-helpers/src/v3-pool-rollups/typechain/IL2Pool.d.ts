/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface IL2PoolInterface extends ethers.utils.Interface {
  functions: {
    'borrow(bytes32)': FunctionFragment;
    'liquidationCall(bytes32,bytes32)': FunctionFragment;
    'rebalanceStableBorrowRate(bytes32)': FunctionFragment;
    'repay(bytes32)': FunctionFragment;
    'repayWithATokens(bytes32)': FunctionFragment;
    'repayWithPermit(bytes32,bytes32,bytes32)': FunctionFragment;
    'setUserUseReserveAsCollateral(bytes32)': FunctionFragment;
    'supply(bytes32)': FunctionFragment;
    'supplyWithPermit(bytes32,bytes32,bytes32)': FunctionFragment;
    'swapBorrowRateMode(bytes32)': FunctionFragment;
    'withdraw(bytes32)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'borrow', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'liquidationCall',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceStableBorrowRate',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'repay', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'repayWithATokens',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayWithPermit',
    values: [BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUserUseReserveAsCollateral',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'supply', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'supplyWithPermit',
    values: [BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBorrowRateMode',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidationCall',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceStableBorrowRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'repayWithATokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'repayWithPermit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUserUseReserveAsCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supplyWithPermit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapBorrowRateMode',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {};
}

export class IL2Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IL2PoolInterface;

  functions: {
    borrow(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidationCall(
      args1: BytesLike,
      args2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rebalanceStableBorrowRate(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repay(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayWithATokens(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supply(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supplyWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  borrow(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidationCall(
    args1: BytesLike,
    args2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rebalanceStableBorrowRate(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repay(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayWithATokens(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayWithPermit(
    args: BytesLike,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supply(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supplyWithPermit(
    args: BytesLike,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    args: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(args: BytesLike, overrides?: CallOverrides): Promise<void>;

    liquidationCall(
      args1: BytesLike,
      args2: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    rebalanceStableBorrowRate(
      args: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    repay(args: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    repayWithATokens(
      args: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      args: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    supply(args: BytesLike, overrides?: CallOverrides): Promise<void>;

    supplyWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapBorrowRateMode(
      args: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(args: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrow(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    liquidationCall(
      args1: BytesLike,
      args2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repay(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayWithATokens(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supply(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supplyWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidationCall(
      args1: BytesLike,
      args2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rebalanceStableBorrowRate(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repay(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayWithATokens(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supply(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supplyWithPermit(
      args: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      args: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
