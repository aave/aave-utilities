/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace IPayloadsControllerCore {
  export type ExecutorConfigStruct = { executor: string; delay: BigNumberish };

  export type ExecutorConfigStructOutput = [string, number] & {
    executor: string;
    delay: number;
  };

  export type ExecutionActionStruct = {
    target: string;
    withDelegateCall: boolean;
    accessLevel: BigNumberish;
    value: BigNumberish;
    signature: string;
    callData: BytesLike;
  };

  export type ExecutionActionStructOutput = [
    string,
    boolean,
    number,
    BigNumber,
    string,
    string,
  ] & {
    target: string;
    withDelegateCall: boolean;
    accessLevel: number;
    value: BigNumber;
    signature: string;
    callData: string;
  };

  export type PayloadStruct = {
    creator: string;
    maximumAccessLevelRequired: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
    queuedAt: BigNumberish;
    executedAt: BigNumberish;
    cancelledAt: BigNumberish;
    expirationTime: BigNumberish;
    delay: BigNumberish;
    gracePeriod: BigNumberish;
    actions: IPayloadsControllerCore.ExecutionActionStruct[];
  };

  export type PayloadStructOutput = [
    string,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    IPayloadsControllerCore.ExecutionActionStructOutput[],
  ] & {
    creator: string;
    maximumAccessLevelRequired: number;
    state: number;
    createdAt: number;
    queuedAt: number;
    executedAt: number;
    cancelledAt: number;
    expirationTime: number;
    delay: number;
    gracePeriod: number;
    actions: IPayloadsControllerCore.ExecutionActionStructOutput[];
  };
}

export declare namespace IPayloadsControllerDataHelper {
  export type ExecutorConfigStruct = {
    accessLevel: BigNumberish;
    config: IPayloadsControllerCore.ExecutorConfigStruct;
  };

  export type ExecutorConfigStructOutput = [
    number,
    IPayloadsControllerCore.ExecutorConfigStructOutput,
  ] & {
    accessLevel: number;
    config: IPayloadsControllerCore.ExecutorConfigStructOutput;
  };

  export type PayloadStruct = {
    id: BigNumberish;
    data: IPayloadsControllerCore.PayloadStruct;
  };

  export type PayloadStructOutput = [
    BigNumber,
    IPayloadsControllerCore.PayloadStructOutput,
  ] & { id: BigNumber; data: IPayloadsControllerCore.PayloadStructOutput };
}

export interface PayloadsControllerDataHelperInterface extends utils.Interface {
  functions: {
    'getExecutorConfigs(address,uint8[])': FunctionFragment;
    'getPayloadsData(address,uint40[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'getExecutorConfigs' | 'getPayloadsData',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getExecutorConfigs',
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPayloadsData',
    values: [string, BigNumberish[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getExecutorConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPayloadsData',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface PayloadsControllerDataHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PayloadsControllerDataHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExecutorConfigs(
      payloadsController: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]]>;

    getPayloadsData(
      payloadsController: string,
      payloadsIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[IPayloadsControllerDataHelper.PayloadStructOutput[]]>;
  };

  getExecutorConfigs(
    payloadsController: string,
    accessLevels: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]>;

  getPayloadsData(
    payloadsController: string,
    payloadsIds: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<IPayloadsControllerDataHelper.PayloadStructOutput[]>;

  callStatic: {
    getExecutorConfigs(
      payloadsController: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<IPayloadsControllerDataHelper.ExecutorConfigStructOutput[]>;

    getPayloadsData(
      payloadsController: string,
      payloadsIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<IPayloadsControllerDataHelper.PayloadStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getExecutorConfigs(
      payloadsController: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPayloadsData(
      payloadsController: string,
      payloadsIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExecutorConfigs(
      payloadsController: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPayloadsData(
      payloadsController: string,
      payloadsIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
