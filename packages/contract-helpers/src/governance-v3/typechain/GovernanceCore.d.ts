/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace IVotingMachineWithProofs {
  export type VotingAssetWithSlotStruct = {
    underlyingAsset: string;
    slot: BigNumberish;
  };

  export type VotingAssetWithSlotStructOutput = [string, BigNumber] & {
    underlyingAsset: string;
    slot: BigNumber;
  };
}

export declare namespace PayloadsControllerUtils {
  export type PayloadStruct = {
    chain: BigNumberish;
    accessLevel: BigNumberish;
    payloadsController: string;
    payloadId: BigNumberish;
  };

  export type PayloadStructOutput = [BigNumber, number, string, number] & {
    chain: BigNumber;
    accessLevel: number;
    payloadsController: string;
    payloadId: number;
  };
}

export declare namespace IGovernanceCore {
  export type ProposalStruct = {
    state: BigNumberish;
    accessLevel: BigNumberish;
    creationTime: BigNumberish;
    votingDuration: BigNumberish;
    votingActivationTime: BigNumberish;
    queuingTime: BigNumberish;
    cancelTimestamp: BigNumberish;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: BytesLike;
    ipfsHash: BytesLike;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    cancellationFee: BigNumberish;
    payloads: PayloadsControllerUtils.PayloadStruct[];
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PayloadsControllerUtils.PayloadStructOutput[],
  ] & {
    state: number;
    accessLevel: number;
    creationTime: number;
    votingDuration: number;
    votingActivationTime: number;
    queuingTime: number;
    cancelTimestamp: number;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: string;
    ipfsHash: string;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    cancellationFee: BigNumber;
    payloads: PayloadsControllerUtils.PayloadStructOutput[];
  };

  export type VotingConfigStruct = {
    coolDownBeforeVotingStart: BigNumberish;
    votingDuration: BigNumberish;
    yesThreshold: BigNumberish;
    yesNoDifferential: BigNumberish;
    minPropositionPower: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type SetVotingConfigInputStruct = {
    accessLevel: BigNumberish;
    coolDownBeforeVotingStart: BigNumberish;
    votingDuration: BigNumberish;
    yesThreshold: BigNumberish;
    yesNoDifferential: BigNumberish;
    minPropositionPower: BigNumberish;
  };

  export type SetVotingConfigInputStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    accessLevel: number;
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type RepresentativeInputStruct = {
    representative: string;
    chainId: BigNumberish;
  };

  export type RepresentativeInputStructOutput = [string, BigNumber] & {
    representative: string;
    chainId: BigNumber;
  };
}

export interface GovernanceCoreInterface extends utils.Interface {
  functions: {
    'ACHIEVABLE_VOTING_PARTICIPATION()': FunctionFragment;
    'CANCELLATION_FEE_COLLECTOR()': FunctionFragment;
    'COOLDOWN_PERIOD()': FunctionFragment;
    'MIN_VOTING_DURATION()': FunctionFragment;
    'NAME()': FunctionFragment;
    'PRECISION_DIVIDER()': FunctionFragment;
    'PROPOSAL_EXPIRATION_TIME()': FunctionFragment;
    'VOTING_TOKENS_CAP()': FunctionFragment;
    'activateVoting(uint256)': FunctionFragment;
    'addVotingPortals(address[])': FunctionFragment;
    'cancelProposal(uint256)': FunctionFragment;
    'createProposal((uint256,uint8,address,uint40)[],address,bytes32)': FunctionFragment;
    'executeProposal(uint256)': FunctionFragment;
    'getCancellationFee()': FunctionFragment;
    'getPowerStrategy()': FunctionFragment;
    'getProposal(uint256)': FunctionFragment;
    'getProposalState(uint256)': FunctionFragment;
    'getProposalsCount()': FunctionFragment;
    'getRepresentativeByChain(address,uint256)': FunctionFragment;
    'getRepresentedVotersByChain(address,uint256)': FunctionFragment;
    'getVotingConfig(uint8)': FunctionFragment;
    'getVotingPortalsCount()': FunctionFragment;
    'guardian()': FunctionFragment;
    'isVotingPortalApproved(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'queueProposal(uint256,uint128,uint128)': FunctionFragment;
    'redeemCancellationFee(uint256[])': FunctionFragment;
    'removeVotingPortals(address[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescueVotingPortal(address)': FunctionFragment;
    'setPowerStrategy(address)': FunctionFragment;
    'setVotingConfigs((uint8,uint24,uint24,uint256,uint256,uint256)[])': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateCancellationFee(uint256)': FunctionFragment;
    'updateGuardian(address)': FunctionFragment;
    'updateRepresentativesForChain((address,uint256)[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ACHIEVABLE_VOTING_PARTICIPATION'
      | 'CANCELLATION_FEE_COLLECTOR'
      | 'COOLDOWN_PERIOD'
      | 'MIN_VOTING_DURATION'
      | 'NAME'
      | 'PRECISION_DIVIDER'
      | 'PROPOSAL_EXPIRATION_TIME'
      | 'VOTING_TOKENS_CAP'
      | 'activateVoting'
      | 'addVotingPortals'
      | 'cancelProposal'
      | 'createProposal'
      | 'executeProposal'
      | 'getCancellationFee'
      | 'getPowerStrategy'
      | 'getProposal'
      | 'getProposalState'
      | 'getProposalsCount'
      | 'getRepresentativeByChain'
      | 'getRepresentedVotersByChain'
      | 'getVotingConfig'
      | 'getVotingPortalsCount'
      | 'guardian'
      | 'isVotingPortalApproved'
      | 'owner'
      | 'queueProposal'
      | 'redeemCancellationFee'
      | 'removeVotingPortals'
      | 'renounceOwnership'
      | 'rescueVotingPortal'
      | 'setPowerStrategy'
      | 'setVotingConfigs'
      | 'transferOwnership'
      | 'updateCancellationFee'
      | 'updateGuardian'
      | 'updateRepresentativesForChain',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'ACHIEVABLE_VOTING_PARTICIPATION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'CANCELLATION_FEE_COLLECTOR',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'COOLDOWN_PERIOD',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MIN_VOTING_DURATION',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'PRECISION_DIVIDER',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PROPOSAL_EXPIRATION_TIME',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'VOTING_TOKENS_CAP',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'activateVoting',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'addVotingPortals',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelProposal',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'createProposal',
    values: [PayloadsControllerUtils.PayloadStruct[], string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeProposal',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCancellationFee',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPowerStrategy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposal',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposalState',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposalsCount',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRepresentativeByChain',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRepresentedVotersByChain',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVotingConfig',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVotingPortalsCount',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isVotingPortalApproved',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'queueProposal',
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemCancellationFee',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeVotingPortals',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'rescueVotingPortal',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPowerStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setVotingConfigs',
    values: [IGovernanceCore.SetVotingConfigInputStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateCancellationFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateGuardian',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRepresentativesForChain',
    values: [IGovernanceCore.RepresentativeInputStruct[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'ACHIEVABLE_VOTING_PARTICIPATION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'CANCELLATION_FEE_COLLECTOR',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'COOLDOWN_PERIOD',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIN_VOTING_DURATION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'PRECISION_DIVIDER',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'PROPOSAL_EXPIRATION_TIME',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'VOTING_TOKENS_CAP',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'activateVoting',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addVotingPortals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCancellationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPowerStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposalState',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposalsCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRepresentativeByChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRepresentedVotersByChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVotingConfig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVotingPortalsCount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isVotingPortalApproved',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'queueProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'redeemCancellationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeVotingPortals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rescueVotingPortal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPowerStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVotingConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateCancellationFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateGuardian',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRepresentativesForChain',
    data: BytesLike,
  ): Result;

  events: {
    'CancellationFeeRedeemed(uint256,address,uint256,bool)': EventFragment;
    'CancellationFeeUpdated(uint256)': EventFragment;
    'GuardianUpdated(address,address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PayloadSent(uint256,uint40,address,uint256,uint256,uint256)': EventFragment;
    'PowerStrategyUpdated(address)': EventFragment;
    'ProposalCanceled(uint256)': EventFragment;
    'ProposalCreated(uint256,address,uint8,bytes32)': EventFragment;
    'ProposalExecuted(uint256)': EventFragment;
    'ProposalFailed(uint256,uint128,uint128)': EventFragment;
    'ProposalQueued(uint256,uint128,uint128)': EventFragment;
    'RepresentativeUpdated(address,address,uint256)': EventFragment;
    'VoteForwarded(uint256,address,bool,(address,uint128)[])': EventFragment;
    'VotingActivated(uint256,bytes32,uint24)': EventFragment;
    'VotingConfigUpdated(uint8,uint24,uint24,uint256,uint256,uint256)': EventFragment;
    'VotingPortalUpdated(address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CancellationFeeRedeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancellationFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GuardianUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PayloadSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PowerStrategyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalFailed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposalQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepresentativeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VoteForwarded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingActivated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VotingPortalUpdated'): EventFragment;
}

export interface CancellationFeeRedeemedEventObject {
  proposalId: BigNumber;
  to: string;
  cancellationFee: BigNumber;
  success: boolean;
}
export type CancellationFeeRedeemedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  CancellationFeeRedeemedEventObject
>;

export type CancellationFeeRedeemedEventFilter =
  TypedEventFilter<CancellationFeeRedeemedEvent>;

export interface CancellationFeeUpdatedEventObject {
  cancellationFee: BigNumber;
}
export type CancellationFeeUpdatedEvent = TypedEvent<
  [BigNumber],
  CancellationFeeUpdatedEventObject
>;

export type CancellationFeeUpdatedEventFilter =
  TypedEventFilter<CancellationFeeUpdatedEvent>;

export interface GuardianUpdatedEventObject {
  oldGuardian: string;
  newGuardian: string;
}
export type GuardianUpdatedEvent = TypedEvent<
  [string, string],
  GuardianUpdatedEventObject
>;

export type GuardianUpdatedEventFilter = TypedEventFilter<GuardianUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayloadSentEventObject {
  proposalId: BigNumber;
  payloadId: number;
  payloadsController: string;
  chainId: BigNumber;
  payloadNumberOnProposal: BigNumber;
  numberOfPayloadsOnProposal: BigNumber;
}
export type PayloadSentEvent = TypedEvent<
  [BigNumber, number, string, BigNumber, BigNumber, BigNumber],
  PayloadSentEventObject
>;

export type PayloadSentEventFilter = TypedEventFilter<PayloadSentEvent>;

export interface PowerStrategyUpdatedEventObject {
  newPowerStrategy: string;
}
export type PowerStrategyUpdatedEvent = TypedEvent<
  [string],
  PowerStrategyUpdatedEventObject
>;

export type PowerStrategyUpdatedEventFilter =
  TypedEventFilter<PowerStrategyUpdatedEvent>;

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  creator: string;
  accessLevel: number;
  ipfsHash: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, number, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalFailedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
}
export type ProposalFailedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ProposalFailedEventObject
>;

export type ProposalFailedEventFilter = TypedEventFilter<ProposalFailedEvent>;

export interface ProposalQueuedEventObject {
  proposalId: BigNumber;
  votesFor: BigNumber;
  votesAgainst: BigNumber;
}
export type ProposalQueuedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ProposalQueuedEventObject
>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export interface RepresentativeUpdatedEventObject {
  voter: string;
  representative: string;
  chainId: BigNumber;
}
export type RepresentativeUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  RepresentativeUpdatedEventObject
>;

export type RepresentativeUpdatedEventFilter =
  TypedEventFilter<RepresentativeUpdatedEvent>;

export interface VoteForwardedEventObject {
  proposalId: BigNumber;
  voter: string;
  support: boolean;
  votingAssetsWithSlot: IVotingMachineWithProofs.VotingAssetWithSlotStructOutput[];
}
export type VoteForwardedEvent = TypedEvent<
  [
    BigNumber,
    string,
    boolean,
    IVotingMachineWithProofs.VotingAssetWithSlotStructOutput[],
  ],
  VoteForwardedEventObject
>;

export type VoteForwardedEventFilter = TypedEventFilter<VoteForwardedEvent>;

export interface VotingActivatedEventObject {
  proposalId: BigNumber;
  snapshotBlockHash: string;
  votingDuration: number;
}
export type VotingActivatedEvent = TypedEvent<
  [BigNumber, string, number],
  VotingActivatedEventObject
>;

export type VotingActivatedEventFilter = TypedEventFilter<VotingActivatedEvent>;

export interface VotingConfigUpdatedEventObject {
  accessLevel: number;
  votingDuration: number;
  coolDownBeforeVotingStart: number;
  yesThreshold: BigNumber;
  yesNoDifferential: BigNumber;
  minPropositionPower: BigNumber;
}
export type VotingConfigUpdatedEvent = TypedEvent<
  [number, number, number, BigNumber, BigNumber, BigNumber],
  VotingConfigUpdatedEventObject
>;

export type VotingConfigUpdatedEventFilter =
  TypedEventFilter<VotingConfigUpdatedEvent>;

export interface VotingPortalUpdatedEventObject {
  votingPortal: string;
  approved: boolean;
}
export type VotingPortalUpdatedEvent = TypedEvent<
  [string, boolean],
  VotingPortalUpdatedEventObject
>;

export type VotingPortalUpdatedEventFilter =
  TypedEventFilter<VotingPortalUpdatedEvent>;

export interface GovernanceCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<[string]>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateVoting(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    addVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: string,
      ipfsHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getCancellationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPowerStrategy(overrides?: CallOverrides): Promise<[string]>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[IGovernanceCore.ProposalStructOutput]>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    getProposalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRepresentativeByChain(
      voter: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRepresentedVotersByChain(
      representative: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getVotingConfig(
      accessLevel: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[IGovernanceCore.VotingConfigStructOutput]>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    isVotingPortalApproved(
      votingPortal: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queueProposal(
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    redeemCancellationFee(
      proposalIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    removeVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    rescueVotingPortal(
      votingPortal: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setPowerStrategy(
      powerStrategy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateCancellationFee(
      cancellationFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateGuardian(
      newGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  ACHIEVABLE_VOTING_PARTICIPATION(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

  COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  activateVoting(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  addVotingPortals(
    votingPortals: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  cancelProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  createProposal(
    payloads: PayloadsControllerUtils.PayloadStruct[],
    votingPortal: string,
    ipfsHash: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  executeProposal(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPowerStrategy(overrides?: CallOverrides): Promise<string>;

  getProposal(
    proposalId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<IGovernanceCore.ProposalStructOutput>;

  getProposalState(
    proposalId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRepresentativeByChain(
    voter: string,
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRepresentedVotersByChain(
    representative: string,
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getVotingConfig(
    accessLevel: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<IGovernanceCore.VotingConfigStructOutput>;

  getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  isVotingPortalApproved(
    votingPortal: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  queueProposal(
    proposalId: BigNumberish,
    forVotes: BigNumberish,
    againstVotes: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  redeemCancellationFee(
    proposalIds: BigNumberish[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  removeVotingPortals(
    votingPortals: string[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  rescueVotingPortal(
    votingPortal: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setPowerStrategy(
    powerStrategy: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setVotingConfigs(
    votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateCancellationFee(
    cancellationFee: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateGuardian(
    newGuardian: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  updateRepresentativesForChain(
    representatives: IGovernanceCore.RepresentativeInputStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    activateVoting(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    addVotingPortals(
      votingPortals: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: string,
      ipfsHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerStrategy(overrides?: CallOverrides): Promise<string>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<IGovernanceCore.ProposalStructOutput>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRepresentativeByChain(
      voter: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRepresentedVotersByChain(
      representative: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getVotingConfig(
      accessLevel: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<IGovernanceCore.VotingConfigStructOutput>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    isVotingPortalApproved(
      votingPortal: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    queueProposal(
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemCancellationFee(
      proposalIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    removeVotingPortals(
      votingPortals: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueVotingPortal(
      votingPortal: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPowerStrategy(
      powerStrategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateCancellationFee(
      cancellationFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateGuardian(
      newGuardian: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'CancellationFeeRedeemed(uint256,address,uint256,bool)'(
      proposalId?: BigNumberish | null,
      to?: string | null,
      cancellationFee?: null,
      success?: boolean | null,
    ): CancellationFeeRedeemedEventFilter;
    CancellationFeeRedeemed(
      proposalId?: BigNumberish | null,
      to?: string | null,
      cancellationFee?: null,
      success?: boolean | null,
    ): CancellationFeeRedeemedEventFilter;

    'CancellationFeeUpdated(uint256)'(
      cancellationFee?: null,
    ): CancellationFeeUpdatedEventFilter;
    CancellationFeeUpdated(
      cancellationFee?: null,
    ): CancellationFeeUpdatedEventFilter;

    'GuardianUpdated(address,address)'(
      oldGuardian?: null,
      newGuardian?: null,
    ): GuardianUpdatedEventFilter;
    GuardianUpdated(
      oldGuardian?: null,
      newGuardian?: null,
    ): GuardianUpdatedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'PayloadSent(uint256,uint40,address,uint256,uint256,uint256)'(
      proposalId?: BigNumberish | null,
      payloadId?: null,
      payloadsController?: string | null,
      chainId?: BigNumberish | null,
      payloadNumberOnProposal?: null,
      numberOfPayloadsOnProposal?: null,
    ): PayloadSentEventFilter;
    PayloadSent(
      proposalId?: BigNumberish | null,
      payloadId?: null,
      payloadsController?: string | null,
      chainId?: BigNumberish | null,
      payloadNumberOnProposal?: null,
      numberOfPayloadsOnProposal?: null,
    ): PayloadSentEventFilter;

    'PowerStrategyUpdated(address)'(
      newPowerStrategy?: string | null,
    ): PowerStrategyUpdatedEventFilter;
    PowerStrategyUpdated(
      newPowerStrategy?: string | null,
    ): PowerStrategyUpdatedEventFilter;

    'ProposalCanceled(uint256)'(
      proposalId?: BigNumberish | null,
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      proposalId?: BigNumberish | null,
    ): ProposalCanceledEventFilter;

    'ProposalCreated(uint256,address,uint8,bytes32)'(
      proposalId?: BigNumberish | null,
      creator?: string | null,
      accessLevel?: BigNumberish | null,
      ipfsHash?: null,
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: BigNumberish | null,
      creator?: string | null,
      accessLevel?: BigNumberish | null,
      ipfsHash?: null,
    ): ProposalCreatedEventFilter;

    'ProposalExecuted(uint256)'(
      proposalId?: BigNumberish | null,
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: BigNumberish | null,
    ): ProposalExecutedEventFilter;

    'ProposalFailed(uint256,uint128,uint128)'(
      proposalId?: BigNumberish | null,
      votesFor?: null,
      votesAgainst?: null,
    ): ProposalFailedEventFilter;
    ProposalFailed(
      proposalId?: BigNumberish | null,
      votesFor?: null,
      votesAgainst?: null,
    ): ProposalFailedEventFilter;

    'ProposalQueued(uint256,uint128,uint128)'(
      proposalId?: BigNumberish | null,
      votesFor?: null,
      votesAgainst?: null,
    ): ProposalQueuedEventFilter;
    ProposalQueued(
      proposalId?: BigNumberish | null,
      votesFor?: null,
      votesAgainst?: null,
    ): ProposalQueuedEventFilter;

    'RepresentativeUpdated(address,address,uint256)'(
      voter?: string | null,
      representative?: string | null,
      chainId?: BigNumberish | null,
    ): RepresentativeUpdatedEventFilter;
    RepresentativeUpdated(
      voter?: string | null,
      representative?: string | null,
      chainId?: BigNumberish | null,
    ): RepresentativeUpdatedEventFilter;

    'VoteForwarded(uint256,address,bool,(address,uint128)[])'(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      support?: boolean | null,
      votingAssetsWithSlot?: null,
    ): VoteForwardedEventFilter;
    VoteForwarded(
      proposalId?: BigNumberish | null,
      voter?: string | null,
      support?: boolean | null,
      votingAssetsWithSlot?: null,
    ): VoteForwardedEventFilter;

    'VotingActivated(uint256,bytes32,uint24)'(
      proposalId?: BigNumberish | null,
      snapshotBlockHash?: BytesLike | null,
      votingDuration?: null,
    ): VotingActivatedEventFilter;
    VotingActivated(
      proposalId?: BigNumberish | null,
      snapshotBlockHash?: BytesLike | null,
      votingDuration?: null,
    ): VotingActivatedEventFilter;

    'VotingConfigUpdated(uint8,uint24,uint24,uint256,uint256,uint256)'(
      accessLevel?: BigNumberish | null,
      votingDuration?: null,
      coolDownBeforeVotingStart?: null,
      yesThreshold?: null,
      yesNoDifferential?: null,
      minPropositionPower?: null,
    ): VotingConfigUpdatedEventFilter;
    VotingConfigUpdated(
      accessLevel?: BigNumberish | null,
      votingDuration?: null,
      coolDownBeforeVotingStart?: null,
      yesThreshold?: null,
      yesNoDifferential?: null,
      minPropositionPower?: null,
    ): VotingConfigUpdatedEventFilter;

    'VotingPortalUpdated(address,bool)'(
      votingPortal?: string | null,
      approved?: boolean | null,
    ): VotingPortalUpdatedEventFilter;
    VotingPortalUpdated(
      votingPortal?: string | null,
      approved?: boolean | null,
    ): VotingPortalUpdatedEventFilter;
  };

  estimateGas: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    CANCELLATION_FEE_COLLECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VOTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSAL_EXPIRATION_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    activateVoting(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    addVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: string,
      ipfsHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getCancellationFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPowerStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRepresentativeByChain(
      voter: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRepresentedVotersByChain(
      representative: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingConfig(
      accessLevel: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingPortalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    isVotingPortalApproved(
      votingPortal: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queueProposal(
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    redeemCancellationFee(
      proposalIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    removeVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    rescueVotingPortal(
      votingPortal: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setPowerStrategy(
      powerStrategy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateCancellationFee(
      cancellationFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateGuardian(
      newGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACHIEVABLE_VOTING_PARTICIPATION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    CANCELLATION_FEE_COLLECTOR(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    COOLDOWN_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VOTING_DURATION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSAL_EXPIRATION_TIME(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    VOTING_TOKENS_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateVoting(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    addVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    createProposal(
      payloads: PayloadsControllerUtils.PayloadStruct[],
      votingPortal: string,
      ipfsHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    executeProposal(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getCancellationFee(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPowerStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposal(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposalState(
      proposalId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposalsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRepresentativeByChain(
      voter: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRepresentedVotersByChain(
      representative: string,
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotingConfig(
      accessLevel: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotingPortalsCount(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVotingPortalApproved(
      votingPortal: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueProposal(
      proposalId: BigNumberish,
      forVotes: BigNumberish,
      againstVotes: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    redeemCancellationFee(
      proposalIds: BigNumberish[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    removeVotingPortals(
      votingPortals: string[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    rescueVotingPortal(
      votingPortal: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setPowerStrategy(
      powerStrategy: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setVotingConfigs(
      votingConfigs: IGovernanceCore.SetVotingConfigInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateCancellationFee(
      cancellationFee: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateGuardian(
      newGuardian: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    updateRepresentativesForChain(
      representatives: IGovernanceCore.RepresentativeInputStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
