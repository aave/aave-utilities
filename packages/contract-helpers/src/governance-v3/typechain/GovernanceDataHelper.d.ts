/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace IGovernanceCore {
  export type VotingConfigStruct = {
    coolDownBeforeVotingStart: BigNumberish;
    votingDuration: BigNumberish;
    yesThreshold: BigNumberish;
    yesNoDifferential: BigNumberish;
    minPropositionPower: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    coolDownBeforeVotingStart: number;
    votingDuration: number;
    yesThreshold: BigNumber;
    yesNoDifferential: BigNumber;
    minPropositionPower: BigNumber;
  };

  export type ProposalStruct = {
    state: BigNumberish;
    accessLevel: BigNumberish;
    creationTime: BigNumberish;
    votingDuration: BigNumberish;
    votingActivationTime: BigNumberish;
    queuingTime: BigNumberish;
    cancelTimestamp: BigNumberish;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: BytesLike;
    ipfsHash: BytesLike;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    cancellationFee: BigNumberish;
    payloads: PayloadsControllerUtils.PayloadStruct[];
  };

  export type ProposalStructOutput = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    PayloadsControllerUtils.PayloadStructOutput[],
  ] & {
    state: number;
    accessLevel: number;
    creationTime: number;
    votingDuration: number;
    votingActivationTime: number;
    queuingTime: number;
    cancelTimestamp: number;
    creator: string;
    votingPortal: string;
    snapshotBlockHash: string;
    ipfsHash: string;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    cancellationFee: BigNumber;
    payloads: PayloadsControllerUtils.PayloadStructOutput[];
  };
}

export declare namespace IGovernanceDataHelper {
  export type VotingConfigStruct = {
    accessLevel: BigNumberish;
    config: IGovernanceCore.VotingConfigStruct;
  };

  export type VotingConfigStructOutput = [
    number,
    IGovernanceCore.VotingConfigStructOutput,
  ] & { accessLevel: number; config: IGovernanceCore.VotingConfigStructOutput };

  export type ConstantsStruct = {
    votingConfigs: IGovernanceDataHelper.VotingConfigStruct[];
    precisionDivider: BigNumberish;
    cooldownPeriod: BigNumberish;
    expirationTime: BigNumberish;
    cancellationFee: BigNumberish;
  };

  export type ConstantsStructOutput = [
    IGovernanceDataHelper.VotingConfigStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    votingConfigs: IGovernanceDataHelper.VotingConfigStructOutput[];
    precisionDivider: BigNumber;
    cooldownPeriod: BigNumber;
    expirationTime: BigNumber;
    cancellationFee: BigNumber;
  };

  export type ProposalStruct = {
    id: BigNumberish;
    votingChainId: BigNumberish;
    proposalData: IGovernanceCore.ProposalStruct;
  };

  export type ProposalStructOutput = [
    BigNumber,
    BigNumber,
    IGovernanceCore.ProposalStructOutput,
  ] & {
    id: BigNumber;
    votingChainId: BigNumber;
    proposalData: IGovernanceCore.ProposalStructOutput;
  };

  export type RepresentativesStruct = {
    chainId: BigNumberish;
    representative: string;
  };

  export type RepresentativesStructOutput = [BigNumber, string] & {
    chainId: BigNumber;
    representative: string;
  };

  export type RepresentedStruct = {
    chainId: BigNumberish;
    votersRepresented: string[];
  };

  export type RepresentedStructOutput = [BigNumber, string[]] & {
    chainId: BigNumber;
    votersRepresented: string[];
  };
}

export declare namespace PayloadsControllerUtils {
  export type PayloadStruct = {
    chain: BigNumberish;
    accessLevel: BigNumberish;
    payloadsController: string;
    payloadId: BigNumberish;
  };

  export type PayloadStructOutput = [BigNumber, number, string, number] & {
    chain: BigNumber;
    accessLevel: number;
    payloadsController: string;
    payloadId: number;
  };
}

export interface GovernanceDataHelperInterface extends utils.Interface {
  functions: {
    'getConstants(address,uint8[])': FunctionFragment;
    'getProposalsData(address,uint256,uint256,uint256)': FunctionFragment;
    'getRepresentationData(address,address,uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getConstants'
      | 'getProposalsData'
      | 'getRepresentationData',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getConstants',
    values: [string, BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposalsData',
    values: [string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRepresentationData',
    values: [string, string, BigNumberish[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'getConstants',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposalsData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRepresentationData',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface GovernanceDataHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceDataHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getConstants(
      govCore: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[IGovernanceDataHelper.ConstantsStructOutput]>;

    getProposalsData(
      govCore: string,
      from: BigNumberish,
      to: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[IGovernanceDataHelper.ProposalStructOutput[]]>;

    getRepresentationData(
      govCore: string,
      wallet: string,
      chainIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<
      [
        IGovernanceDataHelper.RepresentativesStructOutput[],
        IGovernanceDataHelper.RepresentedStructOutput[],
      ]
    >;
  };

  getConstants(
    govCore: string,
    accessLevels: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<IGovernanceDataHelper.ConstantsStructOutput>;

  getProposalsData(
    govCore: string,
    from: BigNumberish,
    to: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<IGovernanceDataHelper.ProposalStructOutput[]>;

  getRepresentationData(
    govCore: string,
    wallet: string,
    chainIds: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<
    [
      IGovernanceDataHelper.RepresentativesStructOutput[],
      IGovernanceDataHelper.RepresentedStructOutput[],
    ]
  >;

  callStatic: {
    getConstants(
      govCore: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<IGovernanceDataHelper.ConstantsStructOutput>;

    getProposalsData(
      govCore: string,
      from: BigNumberish,
      to: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<IGovernanceDataHelper.ProposalStructOutput[]>;

    getRepresentationData(
      govCore: string,
      wallet: string,
      chainIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<
      [
        IGovernanceDataHelper.RepresentativesStructOutput[],
        IGovernanceDataHelper.RepresentedStructOutput[],
      ]
    >;
  };

  filters: {};

  estimateGas: {
    getConstants(
      govCore: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposalsData(
      govCore: string,
      from: BigNumberish,
      to: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRepresentationData(
      govCore: string,
      wallet: string,
      chainIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getConstants(
      govCore: string,
      accessLevels: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposalsData(
      govCore: string,
      from: BigNumberish,
      to: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRepresentationData(
      govCore: string,
      wallet: string,
      chainIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
