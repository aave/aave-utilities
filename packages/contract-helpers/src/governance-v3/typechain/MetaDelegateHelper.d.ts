/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace IMetaDelegateHelper {
  export type MetaDelegateParamsStruct = {
    underlyingAsset: string;
    delegationType: BigNumberish;
    delegator: string;
    delegatee: string;
    deadline: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type MetaDelegateParamsStructOutput = [
    string,
    number,
    string,
    string,
    BigNumber,
    number,
    string,
    string,
  ] & {
    underlyingAsset: string;
    delegationType: number;
    delegator: string;
    delegatee: string;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface MetaDelegateHelperInterface extends utils.Interface {
  functions: {
    'batchMetaDelegate((address,uint8,address,address,uint256,uint8,bytes32,bytes32)[])': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'batchMetaDelegate'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'batchMetaDelegate',
    values: [IMetaDelegateHelper.MetaDelegateParamsStruct[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'batchMetaDelegate',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface MetaDelegateHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaDelegateHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchMetaDelegate(
      delegateParams: IMetaDelegateHelper.MetaDelegateParamsStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  batchMetaDelegate(
    delegateParams: IMetaDelegateHelper.MetaDelegateParamsStruct[],
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    batchMetaDelegate(
      delegateParams: IMetaDelegateHelper.MetaDelegateParamsStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchMetaDelegate(
      delegateParams: IMetaDelegateHelper.MetaDelegateParamsStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchMetaDelegate(
      delegateParams: IMetaDelegateHelper.MetaDelegateParamsStruct[],
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
