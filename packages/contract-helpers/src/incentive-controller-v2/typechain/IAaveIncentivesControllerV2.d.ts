/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IAaveIncentivesControllerV2Interface extends ethers.utils.Interface {
  functions: {
    'PRECISION()': FunctionFragment;
    'claimAllRewards(address[],address)': FunctionFragment;
    'claimAllRewardsOnBehalf(address[],address,address)': FunctionFragment;
    'claimAllRewardsToSelf(address[])': FunctionFragment;
    'claimRewards(address[],uint256,address,address)': FunctionFragment;
    'claimRewardsOnBehalf(address[],uint256,address,address,address)': FunctionFragment;
    'claimRewardsToSelf(address[],uint256,address)': FunctionFragment;
    'configureAssets(tuple[])': FunctionFragment;
    'getAllUserRewardsBalance(address[],address)': FunctionFragment;
    'getClaimer(address)': FunctionFragment;
    'getDistributionEnd(address,address)': FunctionFragment;
    'getRewardOracle(address)': FunctionFragment;
    'getRewardsByAsset(address)': FunctionFragment;
    'getRewardsData(address,address)': FunctionFragment;
    'getRewardsList()': FunctionFragment;
    'getTransferStrategy(address)': FunctionFragment;
    'getUserAssetData(address,address,address)': FunctionFragment;
    'getUserRewardsBalance(address[],address,address)': FunctionFragment;
    'getUserUnclaimedRewardsFromStorage(address,address)': FunctionFragment;
    'handleAction(address,uint256,uint256)': FunctionFragment;
    'setClaimer(address,address)': FunctionFragment;
    'setDistributionEnd(address,address,uint40)': FunctionFragment;
    'setRewardOracle(address,address)': FunctionFragment;
    'setTransferStrategy(address,address,bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimAllRewards',
    values: [string[], string],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAllRewardsOnBehalf',
    values: [string[], string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAllRewardsToSelf',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [string[], BigNumberish, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsOnBehalf',
    values: [string[], BigNumberish, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsToSelf',
    values: [string[], BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'configureAssets',
    values: [
      {
        emissionPerSecond: BigNumberish;
        totalSupply: BigNumberish;
        distributionEnd: BigNumberish;
        asset: string;
        reward: string;
        transferStrategy: string;
        transferStrategyParams: BytesLike;
        rewardOracle: string;
      }[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllUserRewardsBalance',
    values: [string[], string],
  ): string;
  encodeFunctionData(functionFragment: 'getClaimer', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getDistributionEnd',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardOracle',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsByAsset',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsData',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardsList',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTransferStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserAssetData',
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRewardsBalance',
    values: [string[], string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserUnclaimedRewardsFromStorage',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleAction',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setClaimer',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDistributionEnd',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRewardOracle',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTransferStrategy',
    values: [string, string, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'claimAllRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimAllRewardsOnBehalf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimAllRewardsToSelf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimRewardsOnBehalf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimRewardsToSelf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'configureAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllUserRewardsBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getClaimer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getDistributionEnd',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardOracle',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsByAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardsList',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTransferStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserAssetData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserRewardsBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserUnclaimedRewardsFromStorage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'handleAction',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setClaimer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setDistributionEnd',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRewardOracle',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTransferStrategy',
    data: BytesLike,
  ): Result;

  events: {
    'AssetConfigUpdated(address,address,uint256,uint256)': EventFragment;
    'AssetIndexUpdated(address,address,uint256)': EventFragment;
    'ClaimerSet(address,address)': EventFragment;
    'RewardOracleUpdated(address,address)': EventFragment;
    'RewardsAccrued(address,address,uint256)': EventFragment;
    'RewardsClaimed(address,address,address,address,uint256)': EventFragment;
    'TransferStrategyInstalled(address,address)': EventFragment;
    'UserIndexUpdated(address,address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssetConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetIndexUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsAccrued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferStrategyInstalled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserIndexUpdated'): EventFragment;
}

export type AssetConfigUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    asset: string;
    reward: string;
    emission: BigNumber;
    distributionEnd: BigNumber;
  }
>;

export type AssetIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    asset: string;
    reward: string;
    index: BigNumber;
  }
>;

export type ClaimerSetEvent = TypedEvent<
  [string, string] & { user: string; claimer: string }
>;

export type RewardOracleUpdatedEvent = TypedEvent<
  [string, string] & { reward: string; rewardOracle: string }
>;

export type RewardsAccruedEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    reward: string;
    amount: BigNumber;
  }
>;

export type RewardsClaimedEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    user: string;
    reward: string;
    to: string;
    claimer: string;
    amount: BigNumber;
  }
>;

export type TransferStrategyInstalledEvent = TypedEvent<
  [string, string] & { reward: string; transferStrategy: string }
>;

export type UserIndexUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    user: string;
    asset: string;
    reward: string;
    index: BigNumber;
  }
>;

export class IAaveIncentivesControllerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAaveIncentivesControllerV2Interface;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[number]>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimAllRewardsToSelf(
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    configureAssets(
      config: {
        emissionPerSecond: BigNumberish;
        totalSupply: BigNumberish;
        distributionEnd: BigNumberish;
        asset: string;
        reward: string;
        transferStrategy: string;
        transferStrategyParams: BytesLike;
        rewardOracle: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<[string]>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRewardOracle(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<[string[]]>;

    getTransferStrategy(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setClaimer(
      user: string,
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  PRECISION(overrides?: CallOverrides): Promise<number>;

  claimAllRewards(
    assets: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimAllRewardsOnBehalf(
    assets: string[],
    user: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimAllRewardsToSelf(
    assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimRewards(
    assets: string[],
    amount: BigNumberish,
    to: string,
    reward: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimRewardsOnBehalf(
    assets: string[],
    amount: BigNumberish,
    user: string,
    to: string,
    reward: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimRewardsToSelf(
    assets: string[],
    amount: BigNumberish,
    reward: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  configureAssets(
    config: {
      emissionPerSecond: BigNumberish;
      totalSupply: BigNumberish;
      distributionEnd: BigNumberish;
      asset: string;
      reward: string;
      transferStrategy: string;
      transferStrategyParams: BytesLike;
      rewardOracle: string;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAllUserRewardsBalance(
    assets: string[],
    user: string,
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]]>;

  getClaimer(user: string, overrides?: CallOverrides): Promise<string>;

  getDistributionEnd(
    asset: string,
    reward: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRewardOracle(reward: string, overrides?: CallOverrides): Promise<string>;

  getRewardsByAsset(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getRewardsData(
    asset: string,
    reward: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getRewardsList(overrides?: CallOverrides): Promise<string[]>;

  getTransferStrategy(
    reward: string,
    overrides?: CallOverrides,
  ): Promise<string>;

  getUserAssetData(
    user: string,
    asset: string,
    reward: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserRewardsBalance(
    assets: string[],
    user: string,
    reward: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserUnclaimedRewardsFromStorage(
    user: string,
    reward: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  handleAction(
    user: string,
    userBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setClaimer(
    user: string,
    claimer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDistributionEnd(
    asset: string,
    reward: string,
    distributionEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewardOracle(
    reward: string,
    rewardOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTransferStrategy(
    reward: string,
    transferStrategy: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<number>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimAllRewardsToSelf(
      assets: string[],
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        rewardsList: string[];
        claimedAmounts: BigNumber[];
      }
    >;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    configureAssets(
      config: {
        emissionPerSecond: BigNumberish;
        totalSupply: BigNumberish;
        distributionEnd: BigNumberish;
        asset: string;
        reward: string;
        transferStrategy: string;
        transferStrategyParams: BytesLike;
        rewardOracle: string;
      }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<string>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardOracle(reward: string, overrides?: CallOverrides): Promise<string>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getRewardsList(overrides?: CallOverrides): Promise<string[]>;

    getTransferStrategy(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setClaimer(
      user: string,
      claimer: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      params: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AssetConfigUpdated(address,address,uint256,uint256)'(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        asset: string;
        reward: string;
        emission: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    AssetConfigUpdated(
      asset?: string | null,
      reward?: string | null,
      emission?: null,
      distributionEnd?: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        asset: string;
        reward: string;
        emission: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    'AssetIndexUpdated(address,address,uint256)'(
      asset?: string | null,
      reward?: string | null,
      index?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; reward: string; index: BigNumber }
    >;

    AssetIndexUpdated(
      asset?: string | null,
      reward?: string | null,
      index?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { asset: string; reward: string; index: BigNumber }
    >;

    'ClaimerSet(address,address)'(
      user?: string | null,
      claimer?: string | null,
    ): TypedEventFilter<[string, string], { user: string; claimer: string }>;

    ClaimerSet(
      user?: string | null,
      claimer?: string | null,
    ): TypedEventFilter<[string, string], { user: string; claimer: string }>;

    'RewardOracleUpdated(address,address)'(
      reward?: string | null,
      rewardOracle?: string | null,
    ): TypedEventFilter<
      [string, string],
      { reward: string; rewardOracle: string }
    >;

    RewardOracleUpdated(
      reward?: string | null,
      rewardOracle?: string | null,
    ): TypedEventFilter<
      [string, string],
      { reward: string; rewardOracle: string }
    >;

    'RewardsAccrued(address,address,uint256)'(
      user?: string | null,
      reward?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; reward: string; amount: BigNumber }
    >;

    RewardsAccrued(
      user?: string | null,
      reward?: string | null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; reward: string; amount: BigNumber }
    >;

    'RewardsClaimed(address,address,address,address,uint256)'(
      user?: string | null,
      reward?: string | null,
      to?: string | null,
      claimer?: null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        user: string;
        reward: string;
        to: string;
        claimer: string;
        amount: BigNumber;
      }
    >;

    RewardsClaimed(
      user?: string | null,
      reward?: string | null,
      to?: string | null,
      claimer?: null,
      amount?: null,
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        user: string;
        reward: string;
        to: string;
        claimer: string;
        amount: BigNumber;
      }
    >;

    'TransferStrategyInstalled(address,address)'(
      reward?: string | null,
      transferStrategy?: string | null,
    ): TypedEventFilter<
      [string, string],
      { reward: string; transferStrategy: string }
    >;

    TransferStrategyInstalled(
      reward?: string | null,
      transferStrategy?: string | null,
    ): TypedEventFilter<
      [string, string],
      { reward: string; transferStrategy: string }
    >;

    'UserIndexUpdated(address,address,address,uint256)'(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { user: string; asset: string; reward: string; index: BigNumber }
    >;

    UserIndexUpdated(
      user?: string | null,
      asset?: string | null,
      reward?: string | null,
      index?: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { user: string; asset: string; reward: string; index: BigNumber }
    >;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimAllRewardsToSelf(
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    configureAssets(
      config: {
        emissionPerSecond: BigNumberish;
        totalSupply: BigNumberish;
        distributionEnd: BigNumberish;
        asset: string;
        reward: string;
        transferStrategy: string;
        transferStrategyParams: BytesLike;
        rewardOracle: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getClaimer(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardOracle(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsList(overrides?: CallOverrides): Promise<BigNumber>;

    getTransferStrategy(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setClaimer(
      user: string,
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAllRewards(
      assets: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimAllRewardsOnBehalf(
      assets: string[],
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimAllRewardsToSelf(
      assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimRewards(
      assets: string[],
      amount: BigNumberish,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimRewardsOnBehalf(
      assets: string[],
      amount: BigNumberish,
      user: string,
      to: string,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimRewardsToSelf(
      assets: string[],
      amount: BigNumberish,
      reward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    configureAssets(
      config: {
        emissionPerSecond: BigNumberish;
        totalSupply: BigNumberish;
        distributionEnd: BigNumberish;
        asset: string;
        reward: string;
        transferStrategy: string;
        transferStrategyParams: BytesLike;
        rewardOracle: string;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAllUserRewardsBalance(
      assets: string[],
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getClaimer(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDistributionEnd(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardOracle(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardsByAsset(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardsData(
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransferStrategy(
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: string,
      asset: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRewardsBalance(
      assets: string[],
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserUnclaimedRewardsFromStorage(
      user: string,
      reward: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    handleAction(
      user: string,
      userBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setClaimer(
      user: string,
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDistributionEnd(
      asset: string,
      reward: string,
      distributionEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardOracle(
      reward: string,
      rewardOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTransferStrategy(
      reward: string,
      transferStrategy: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
