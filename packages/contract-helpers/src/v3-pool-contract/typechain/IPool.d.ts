/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    'BRIDGE_PROTOCOL_FEE()': FunctionFragment;
    'FLASHLOAN_PREMIUM_TOTAL()': FunctionFragment;
    'FLASHLOAN_PREMIUM_TO_PROTOCOL()': FunctionFragment;
    'MAX_NUMBER_RESERVES()': FunctionFragment;
    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()': FunctionFragment;
    'backUnbacked(address,uint256,uint256)': FunctionFragment;
    'borrow(address,uint256,uint256,uint16,address)': FunctionFragment;
    'configureEModeCategory(uint8,tuple)': FunctionFragment;
    'deposit(address,uint256,address,uint16)': FunctionFragment;
    'dropReserve(address)': FunctionFragment;
    'finalizeTransfer(address,address,address,uint256,uint256,uint256)': FunctionFragment;
    'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)': FunctionFragment;
    'flashLoanSimple(address,address,uint256,bytes,uint16)': FunctionFragment;
    'getAddressesProvider()': FunctionFragment;
    'getConfiguration(address)': FunctionFragment;
    'getEModeCategoryData(uint8)': FunctionFragment;
    'getReserveData(address)': FunctionFragment;
    'getReserveNormalizedIncome(address)': FunctionFragment;
    'getReserveNormalizedVariableDebt(address)': FunctionFragment;
    'getReservesList()': FunctionFragment;
    'getUserAccountData(address)': FunctionFragment;
    'getUserConfiguration(address)': FunctionFragment;
    'getUserEMode(address)': FunctionFragment;
    'initReserve(address,address,address,address,address)': FunctionFragment;
    'liquidationCall(address,address,address,uint256,bool)': FunctionFragment;
    'mintToTreasury(address[])': FunctionFragment;
    'mintUnbacked(address,uint256,address,uint16)': FunctionFragment;
    'rebalanceStableBorrowRate(address,address)': FunctionFragment;
    'repay(address,uint256,uint256,address)': FunctionFragment;
    'repayWithATokens(address,uint256,uint256,address)': FunctionFragment;
    'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'setConfiguration(address,uint256)': FunctionFragment;
    'setReserveInterestRateStrategyAddress(address,address)': FunctionFragment;
    'setUserEMode(uint8)': FunctionFragment;
    'setUserUseReserveAsCollateral(address,bool)': FunctionFragment;
    'supply(address,uint256,address,uint16)': FunctionFragment;
    'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'swapBorrowRateMode(address,uint256)': FunctionFragment;
    'updateBridgeProtocolFee(uint256)': FunctionFragment;
    'updateFlashloanPremiums(uint256,uint256)': FunctionFragment;
    'withdraw(address,uint256,address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'BRIDGE_PROTOCOL_FEE',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'FLASHLOAN_PREMIUM_TOTAL',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'FLASHLOAN_PREMIUM_TO_PROTOCOL',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_NUMBER_RESERVES',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_STABLE_RATE_BORROW_SIZE_PERCENT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'backUnbacked',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'configureEModeCategory',
    values: [
      BigNumberish,
      {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'dropReserve', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'finalizeTransfer',
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoan',
    values: [
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      string,
      BytesLike,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoanSimple',
    values: [string, string, BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddressesProvider',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getConfiguration',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEModeCategoryData',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveData',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveNormalizedIncome',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReserveNormalizedVariableDebt',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReservesList',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserAccountData',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserConfiguration',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserEMode',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initReserve',
    values: [string, string, string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidationCall',
    values: [string, string, string, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintToTreasury',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintUnbacked',
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceStableBorrowRate',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'repay',
    values: [string, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayWithATokens',
    values: [string, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayWithPermit',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfiguration',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setReserveInterestRateStrategyAddress',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUserEMode',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUserUseReserveAsCollateral',
    values: [string, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'supply',
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'supplyWithPermit',
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapBorrowRateMode',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBridgeProtocolFee',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateFlashloanPremiums',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish, string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'BRIDGE_PROTOCOL_FEE',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'FLASHLOAN_PREMIUM_TOTAL',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'FLASHLOAN_PREMIUM_TO_PROTOCOL',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_NUMBER_RESERVES',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_STABLE_RATE_BORROW_SIZE_PERCENT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'backUnbacked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'configureEModeCategory',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'dropReserve',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalizeTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'flashLoanSimple',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAddressesProvider',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getConfiguration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEModeCategoryData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveNormalizedIncome',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReserveNormalizedVariableDebt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReservesList',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserAccountData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserConfiguration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserEMode',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initReserve',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'liquidationCall',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintToTreasury',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'mintUnbacked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceStableBorrowRate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'repayWithATokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'repayWithPermit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setConfiguration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setReserveInterestRateStrategyAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUserEMode',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUserUseReserveAsCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'supplyWithPermit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'swapBorrowRateMode',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateBridgeProtocolFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateFlashloanPremiums',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'BackUnbacked(address,address,uint256,uint256)': EventFragment;
    'Borrow(address,address,address,uint256,uint256,uint256,uint16)': EventFragment;
    'FlashLoan(address,address,address,uint256,uint256,uint16)': EventFragment;
    'LiquidationCall(address,address,address,uint256,uint256,address,bool)': EventFragment;
    'MintUnbacked(address,address,address,uint256,uint16)': EventFragment;
    'MintedToTreasury(address,uint256)': EventFragment;
    'RebalanceStableBorrowRate(address,address)': EventFragment;
    'Repay(address,address,address,uint256)': EventFragment;
    'ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'ReserveUsedAsCollateralDisabled(address,address)': EventFragment;
    'ReserveUsedAsCollateralEnabled(address,address)': EventFragment;
    'Supply(address,address,address,uint256,uint16)': EventFragment;
    'Swap(address,address,uint256)': EventFragment;
    'UserEModeSet(address,uint8)': EventFragment;
    'Withdraw(address,address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BackUnbacked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FlashLoan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationCall'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintUnbacked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintedToTreasury'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RebalanceStableBorrowRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveDataUpdated'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReserveUsedAsCollateralDisabled',
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'ReserveUsedAsCollateralEnabled',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserEModeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export class IPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPoolInterface;

  functions: {
    BRIDGE_PROTOCOL_FEE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'BRIDGE_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'FLASHLOAN_PREMIUM_TOTAL()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    FLASHLOAN_PREMIUM_TO_PROTOCOL(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'FLASHLOAN_PREMIUM_TO_PROTOCOL()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()'(
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    backUnbacked(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'backUnbacked(address,uint256,uint256)'(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,uint256,uint16,address)'(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    configureEModeCategory(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))'(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'deposit(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    dropReserve(
      asset: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'dropReserve(address)'(
      asset: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    flashLoan(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)'(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    flashLoanSimple(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'flashLoanSimple(address,address,uint256,bytes,uint16)'(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    getAddressesProvider(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    'getConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    getEModeCategoryData(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        ltv: number;
        liquidationThreshold: number;
        liquidationBonus: number;
        priceSource: string;
        label: string;
        0: number;
        1: number;
        2: number;
        3: string;
        4: string;
      };
    }>;

    'getEModeCategoryData(uint8)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        ltv: number;
        liquidationThreshold: number;
        liquidationBonus: number;
        priceSource: string;
        label: string;
        0: number;
        1: number;
        2: number;
        3: string;
        4: string;
      };
    }>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        variableBorrowIndex: BigNumber;
        currentVariableBorrowRate: BigNumber;
        currentStableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        id: number;
        accruedToTreasury: BigNumber;
        unbacked: BigNumber;
        isolationModeTotalDebt: BigNumber;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: string;
        8: string;
        9: string;
        10: string;
        11: number;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
      };
    }>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: {
        configuration: { data: BigNumber; 0: BigNumber };
        liquidityIndex: BigNumber;
        currentLiquidityRate: BigNumber;
        variableBorrowIndex: BigNumber;
        currentVariableBorrowRate: BigNumber;
        currentStableBorrowRate: BigNumber;
        lastUpdateTimestamp: number;
        aTokenAddress: string;
        stableDebtTokenAddress: string;
        variableDebtTokenAddress: string;
        interestRateStrategyAddress: string;
        id: number;
        accruedToTreasury: BigNumber;
        unbacked: BigNumber;
        isolationModeTotalDebt: BigNumber;
        0: { data: BigNumber; 0: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: BigNumber;
        6: number;
        7: string;
        8: string;
        9: string;
        10: string;
        11: number;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
      };
    }>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    getReservesList(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    'getReservesList()'(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getUserAccountData(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      totalCollateralBase: BigNumber;
      totalDebtBase: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getUserAccountData(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      totalCollateralBase: BigNumber;
      totalDebtBase: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    'getUserConfiguration(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: { data: BigNumber; 0: BigNumber };
    }>;

    getUserEMode(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    'getUserEMode(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      0: BigNumber;
    }>;

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'initReserve(address,address,address,address,address)'(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintToTreasury(
      assets: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintToTreasury(address[])'(
      assets: string[],
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    mintUnbacked(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'mintUnbacked(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    rebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'rebalanceStableBorrowRate(address,address)'(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'repay(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    repayWithATokens(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'repayWithATokens(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    repayWithPermit(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setUserEMode(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setUserEMode(uint8)'(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setUserUseReserveAsCollateral(address,bool)'(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    supply(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'supply(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    supplyWithPermit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    swapBorrowRateMode(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'swapBorrowRateMode(address,uint256)'(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    updateBridgeProtocolFee(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'updateBridgeProtocolFee(uint256)'(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    updateFlashloanPremiums(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'updateFlashloanPremiums(uint256,uint256)'(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'withdraw(address,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;
  };

  BRIDGE_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  'BRIDGE_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

  FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

  'FLASHLOAN_PREMIUM_TOTAL()'(overrides?: CallOverrides): Promise<BigNumber>;

  FLASHLOAN_PREMIUM_TO_PROTOCOL(overrides?: CallOverrides): Promise<BigNumber>;

  'FLASHLOAN_PREMIUM_TO_PROTOCOL()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

  'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_STABLE_RATE_BORROW_SIZE_PERCENT(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()'(
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  backUnbacked(
    asset: string,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'backUnbacked(address,uint256,uint256)'(
    asset: string,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  borrow(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'borrow(address,uint256,uint256,uint16,address)'(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  configureEModeCategory(
    id: BigNumberish,
    config: {
      ltv: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      priceSource: string;
      label: string;
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))'(
    id: BigNumberish,
    config: {
      ltv: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      priceSource: string;
      label: string;
    },
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  deposit(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'deposit(address,uint256,address,uint16)'(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  dropReserve(
    asset: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'dropReserve(address)'(
    asset: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  finalizeTransfer(
    asset: string,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
    asset: string,
    from: string,
    to: string,
    amount: BigNumberish,
    balanceFromBefore: BigNumberish,
    balanceToBefore: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  flashLoan(
    receiverAddress: string,
    assets: string[],
    amounts: BigNumberish[],
    modes: BigNumberish[],
    onBehalfOf: string,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)'(
    receiverAddress: string,
    assets: string[],
    amounts: BigNumberish[],
    modes: BigNumberish[],
    onBehalfOf: string,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  flashLoanSimple(
    receiverAddress: string,
    asset: string,
    amount: BigNumberish,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'flashLoanSimple(address,address,uint256,bytes,uint16)'(
    receiverAddress: string,
    asset: string,
    amount: BigNumberish,
    params: BytesLike,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  getAddressesProvider(overrides?: CallOverrides): Promise<string>;

  'getAddressesProvider()'(overrides?: CallOverrides): Promise<string>;

  getConfiguration(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  'getConfiguration(address)'(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  getEModeCategoryData(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    ltv: number;
    liquidationThreshold: number;
    liquidationBonus: number;
    priceSource: string;
    label: string;
    0: number;
    1: number;
    2: number;
    3: string;
    4: string;
  }>;

  'getEModeCategoryData(uint8)'(
    id: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<{
    ltv: number;
    liquidationThreshold: number;
    liquidationBonus: number;
    priceSource: string;
    label: string;
    0: number;
    1: number;
    2: number;
    3: string;
    4: string;
  }>;

  getReserveData(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    variableBorrowIndex: BigNumber;
    currentVariableBorrowRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: number;
    accruedToTreasury: BigNumber;
    unbacked: BigNumber;
    isolationModeTotalDebt: BigNumber;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: string;
    10: string;
    11: number;
    12: BigNumber;
    13: BigNumber;
    14: BigNumber;
  }>;

  'getReserveData(address)'(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<{
    configuration: { data: BigNumber; 0: BigNumber };
    liquidityIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    variableBorrowIndex: BigNumber;
    currentVariableBorrowRate: BigNumber;
    currentStableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: number;
    accruedToTreasury: BigNumber;
    unbacked: BigNumber;
    isolationModeTotalDebt: BigNumber;
    0: { data: BigNumber; 0: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: number;
    7: string;
    8: string;
    9: string;
    10: string;
    11: number;
    12: BigNumber;
    13: BigNumber;
    14: BigNumber;
  }>;

  getReserveNormalizedIncome(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getReserveNormalizedIncome(address)'(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReserveNormalizedVariableDebt(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getReserveNormalizedVariableDebt(address)'(
    asset: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReservesList(overrides?: CallOverrides): Promise<string[]>;

  'getReservesList()'(overrides?: CallOverrides): Promise<string[]>;

  getUserAccountData(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{
    totalCollateralBase: BigNumber;
    totalDebtBase: BigNumber;
    availableBorrowsBase: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  'getUserAccountData(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{
    totalCollateralBase: BigNumber;
    totalDebtBase: BigNumber;
    availableBorrowsBase: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  getUserConfiguration(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  'getUserConfiguration(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<{ data: BigNumber; 0: BigNumber }>;

  getUserEMode(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getUserEMode(address)'(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initReserve(
    asset: string,
    aTokenAddress: string,
    stableDebtAddress: string,
    variableDebtAddress: string,
    interestRateStrategyAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'initReserve(address,address,address,address,address)'(
    asset: string,
    aTokenAddress: string,
    stableDebtAddress: string,
    variableDebtAddress: string,
    interestRateStrategyAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  liquidationCall(
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'liquidationCall(address,address,address,uint256,bool)'(
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  mintToTreasury(
    assets: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintToTreasury(address[])'(
    assets: string[],
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  mintUnbacked(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'mintUnbacked(address,uint256,address,uint16)'(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  rebalanceStableBorrowRate(
    asset: string,
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'rebalanceStableBorrowRate(address,address)'(
    asset: string,
    user: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  repay(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'repay(address,uint256,uint256,address)'(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  repayWithATokens(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'repayWithATokens(address,uint256,uint256,address)'(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  repayWithPermit(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)'(
    asset: string,
    amount: BigNumberish,
    rateMode: BigNumberish,
    onBehalfOf: string,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setConfiguration(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setConfiguration(address,uint256)'(
    asset: string,
    configuration: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setReserveInterestRateStrategyAddress(
    asset: string,
    rateStrategyAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setReserveInterestRateStrategyAddress(address,address)'(
    asset: string,
    rateStrategyAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setUserEMode(
    categoryId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setUserEMode(uint8)'(
    categoryId: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    asset: string,
    useAsCollateral: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'setUserUseReserveAsCollateral(address,bool)'(
    asset: string,
    useAsCollateral: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  supply(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'supply(address,uint256,address,uint16)'(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  supplyWithPermit(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)'(
    asset: string,
    amount: BigNumberish,
    onBehalfOf: string,
    referralCode: BigNumberish,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  swapBorrowRateMode(
    asset: string,
    rateMode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'swapBorrowRateMode(address,uint256)'(
    asset: string,
    rateMode: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  updateBridgeProtocolFee(
    bridgeProtocolFee: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'updateBridgeProtocolFee(uint256)'(
    bridgeProtocolFee: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  updateFlashloanPremiums(
    flashLoanPremiumTotal: BigNumberish,
    flashLoanPremiumToProtocol: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'updateFlashloanPremiums(uint256,uint256)'(
    flashLoanPremiumTotal: BigNumberish,
    flashLoanPremiumToProtocol: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  withdraw(
    asset: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'withdraw(address,uint256,address)'(
    asset: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGE_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    'BRIDGE_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

    'FLASHLOAN_PREMIUM_TOTAL()'(overrides?: CallOverrides): Promise<BigNumber>;

    FLASHLOAN_PREMIUM_TO_PROTOCOL(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'FLASHLOAN_PREMIUM_TO_PROTOCOL()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    backUnbacked(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'backUnbacked(address,uint256,uint256)'(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'borrow(address,uint256,uint256,uint16,address)'(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    configureEModeCategory(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: CallOverrides,
    ): Promise<void>;

    'configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))'(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'deposit(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    dropReserve(asset: string, overrides?: CallOverrides): Promise<void>;

    'dropReserve(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    flashLoan(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)'(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    flashLoanSimple(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'flashLoanSimple(address,address,uint256,bytes,uint16)'(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAddressesProvider(overrides?: CallOverrides): Promise<string>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<string>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    'getConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    getEModeCategoryData(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      ltv: number;
      liquidationThreshold: number;
      liquidationBonus: number;
      priceSource: string;
      label: string;
      0: number;
      1: number;
      2: number;
      3: string;
      4: string;
    }>;

    'getEModeCategoryData(uint8)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<{
      ltv: number;
      liquidationThreshold: number;
      liquidationBonus: number;
      priceSource: string;
      label: string;
      0: number;
      1: number;
      2: number;
      3: string;
      4: string;
    }>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      currentVariableBorrowRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: number;
      accruedToTreasury: BigNumber;
      unbacked: BigNumber;
      isolationModeTotalDebt: BigNumber;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: string;
      10: string;
      11: number;
      12: BigNumber;
      13: BigNumber;
      14: BigNumber;
    }>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<{
      configuration: { data: BigNumber; 0: BigNumber };
      liquidityIndex: BigNumber;
      currentLiquidityRate: BigNumber;
      variableBorrowIndex: BigNumber;
      currentVariableBorrowRate: BigNumber;
      currentStableBorrowRate: BigNumber;
      lastUpdateTimestamp: number;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: number;
      accruedToTreasury: BigNumber;
      unbacked: BigNumber;
      isolationModeTotalDebt: BigNumber;
      0: { data: BigNumber; 0: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: number;
      7: string;
      8: string;
      9: string;
      10: string;
      11: number;
      12: BigNumber;
      13: BigNumber;
      14: BigNumber;
    }>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<string[]>;

    'getReservesList()'(overrides?: CallOverrides): Promise<string[]>;

    getUserAccountData(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      totalCollateralBase: BigNumber;
      totalDebtBase: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    'getUserAccountData(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{
      totalCollateralBase: BigNumber;
      totalDebtBase: BigNumber;
      availableBorrowsBase: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    'getUserConfiguration(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<{ data: BigNumber; 0: BigNumber }>;

    getUserEMode(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserEMode(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initReserve(address,address,address,address,address)'(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintToTreasury(assets: string[], overrides?: CallOverrides): Promise<void>;

    'mintToTreasury(address[])'(
      assets: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    mintUnbacked(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'mintUnbacked(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    rebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'rebalanceStableBorrowRate(address,address)'(
      asset: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'repay(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayWithATokens(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'repayWithATokens(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayWithPermit(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      asset: string,
      rateStrategyAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserEMode(
      categoryId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setUserEMode(uint8)'(
      categoryId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'setUserUseReserveAsCollateral(address,bool)'(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    supply(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'supply(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supplyWithPermit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapBorrowRateMode(
      asset: string,
      rateMode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'swapBorrowRateMode(address,uint256)'(
      asset: string,
      rateMode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateBridgeProtocolFee(
      bridgeProtocolFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateBridgeProtocolFee(uint256)'(
      bridgeProtocolFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateFlashloanPremiums(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'updateFlashloanPremiums(uint256,uint256)'(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'withdraw(address,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    BackUnbacked(
      reserve: string | null,
      backer: string | null,
      amount: null,
      fee: null,
    ): EventFilter;

    Borrow(
      reserve: string | null,
      user: null,
      onBehalfOf: string | null,
      amount: null,
      borrowRateMode: null,
      borrowRate: null,
      referral: BigNumberish | null,
    ): EventFilter;

    FlashLoan(
      target: string | null,
      initiator: string | null,
      asset: string | null,
      amount: null,
      premium: null,
      referralCode: null,
    ): EventFilter;

    LiquidationCall(
      collateralAsset: string | null,
      debtAsset: string | null,
      user: string | null,
      debtToCover: null,
      liquidatedCollateralAmount: null,
      liquidator: null,
      receiveAToken: null,
    ): EventFilter;

    MintUnbacked(
      reserve: string | null,
      user: null,
      onBehalfOf: string | null,
      amount: null,
      referral: BigNumberish | null,
    ): EventFilter;

    MintedToTreasury(reserve: string | null, amountMinted: null): EventFilter;

    RebalanceStableBorrowRate(
      reserve: string | null,
      user: string | null,
    ): EventFilter;

    Repay(
      reserve: string | null,
      user: string | null,
      repayer: string | null,
      amount: null,
    ): EventFilter;

    ReserveDataUpdated(
      reserve: string | null,
      liquidityRate: null,
      stableBorrowRate: null,
      variableBorrowRate: null,
      liquidityIndex: null,
      variableBorrowIndex: null,
    ): EventFilter;

    ReserveUsedAsCollateralDisabled(
      reserve: string | null,
      user: string | null,
    ): EventFilter;

    ReserveUsedAsCollateralEnabled(
      reserve: string | null,
      user: string | null,
    ): EventFilter;

    Supply(
      reserve: string | null,
      user: null,
      onBehalfOf: string | null,
      amount: null,
      referralCode: BigNumberish | null,
    ): EventFilter;

    Swap(
      reserve: string | null,
      user: string | null,
      rateMode: null,
    ): EventFilter;

    UserEModeSet(user: string | null, categoryId: null): EventFilter;

    Withdraw(
      reserve: string | null,
      user: string | null,
      to: string | null,
      amount: null,
    ): EventFilter;
  };

  estimateGas: {
    BRIDGE_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    'BRIDGE_PROTOCOL_FEE()'(overrides?: CallOverrides): Promise<BigNumber>;

    FLASHLOAN_PREMIUM_TOTAL(overrides?: CallOverrides): Promise<BigNumber>;

    'FLASHLOAN_PREMIUM_TOTAL()'(overrides?: CallOverrides): Promise<BigNumber>;

    FLASHLOAN_PREMIUM_TO_PROTOCOL(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'FLASHLOAN_PREMIUM_TO_PROTOCOL()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    MAX_NUMBER_RESERVES(overrides?: CallOverrides): Promise<BigNumber>;

    'MAX_NUMBER_RESERVES()'(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()'(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    backUnbacked(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'backUnbacked(address,uint256,uint256)'(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'borrow(address,uint256,uint256,uint16,address)'(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    configureEModeCategory(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))'(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<BigNumber>;

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'deposit(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    dropReserve(asset: string, overrides?: Overrides): Promise<BigNumber>;

    'dropReserve(address)'(
      asset: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    flashLoan(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)'(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    flashLoanSimple(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'flashLoanSimple(address,address,uint256,bytes,uint16)'(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    getAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    'getAddressesProvider()'(overrides?: CallOverrides): Promise<BigNumber>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEModeCategoryData(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getEModeCategoryData(uint8)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>;

    'getReservesList()'(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccountData(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getUserAccountData(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getUserConfiguration(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserEMode(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getUserEMode(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'initReserve(address,address,address,address,address)'(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    mintToTreasury(assets: string[], overrides?: Overrides): Promise<BigNumber>;

    'mintToTreasury(address[])'(
      assets: string[],
      overrides?: Overrides,
    ): Promise<BigNumber>;

    mintUnbacked(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'mintUnbacked(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    rebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'rebalanceStableBorrowRate(address,address)'(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'repay(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    repayWithATokens(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'repayWithATokens(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    repayWithPermit(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setUserEMode(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setUserEMode(uint8)'(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'setUserUseReserveAsCollateral(address,bool)'(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    supply(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'supply(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    supplyWithPermit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    swapBorrowRateMode(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'swapBorrowRateMode(address,uint256)'(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    updateBridgeProtocolFee(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'updateBridgeProtocolFee(uint256)'(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    updateFlashloanPremiums(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'updateFlashloanPremiums(uint256,uint256)'(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'withdraw(address,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_PROTOCOL_FEE(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'BRIDGE_PROTOCOL_FEE()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    FLASHLOAN_PREMIUM_TOTAL(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'FLASHLOAN_PREMIUM_TOTAL()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    FLASHLOAN_PREMIUM_TO_PROTOCOL(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'FLASHLOAN_PREMIUM_TO_PROTOCOL()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MAX_NUMBER_RESERVES(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'MAX_NUMBER_RESERVES()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MAX_STABLE_RATE_BORROW_SIZE_PERCENT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'MAX_STABLE_RATE_BORROW_SIZE_PERCENT()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    backUnbacked(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'backUnbacked(address,uint256,uint256)'(
      asset: string,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    borrow(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,uint256,uint16,address)'(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    configureEModeCategory(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))'(
      id: BigNumberish,
      config: {
        ltv: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        priceSource: string;
        label: string;
      },
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'deposit(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    dropReserve(
      asset: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'dropReserve(address)'(
      asset: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    finalizeTransfer(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'finalizeTransfer(address,address,address,uint256,uint256,uint256)'(
      asset: string,
      from: string,
      to: string,
      amount: BigNumberish,
      balanceFromBefore: BigNumberish,
      balanceToBefore: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)'(
      receiverAddress: string,
      assets: string[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: string,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    flashLoanSimple(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'flashLoanSimple(address,address,uint256,bytes,uint16)'(
      receiverAddress: string,
      asset: string,
      amount: BigNumberish,
      params: BytesLike,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    getAddressesProvider(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getAddressesProvider()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getConfiguration(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getConfiguration(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEModeCategoryData(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getEModeCategoryData(uint8)'(
      id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveData(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getReserveData(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedIncome(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveNormalizedVariableDebt(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getReserveNormalizedVariableDebt(address)'(
      asset: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getReservesList()'(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserAccountData(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getUserAccountData(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserConfiguration(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getUserConfiguration(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserEMode(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getUserEMode(address)'(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initReserve(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'initReserve(address,address,address,address,address)'(
      asset: string,
      aTokenAddress: string,
      stableDebtAddress: string,
      variableDebtAddress: string,
      interestRateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'liquidationCall(address,address,address,uint256,bool)'(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    mintToTreasury(
      assets: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintToTreasury(address[])'(
      assets: string[],
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    mintUnbacked(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'mintUnbacked(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    rebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'rebalanceStableBorrowRate(address,address)'(
      asset: string,
      user: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    repay(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'repay(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    repayWithATokens(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'repayWithATokens(address,uint256,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    repayWithPermit(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setConfiguration(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setConfiguration(address,uint256)'(
      asset: string,
      configuration: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setReserveInterestRateStrategyAddress(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setReserveInterestRateStrategyAddress(address,address)'(
      asset: string,
      rateStrategyAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setUserEMode(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setUserEMode(uint8)'(
      categoryId: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'setUserUseReserveAsCollateral(address,bool)'(
      asset: string,
      useAsCollateral: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    supply(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'supply(address,uint256,address,uint16)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    supplyWithPermit(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)'(
      asset: string,
      amount: BigNumberish,
      onBehalfOf: string,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    swapBorrowRateMode(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'swapBorrowRateMode(address,uint256)'(
      asset: string,
      rateMode: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    updateBridgeProtocolFee(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'updateBridgeProtocolFee(uint256)'(
      bridgeProtocolFee: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    updateFlashloanPremiums(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'updateFlashloanPremiums(uint256,uint256)'(
      flashLoanPremiumTotal: BigNumberish,
      flashLoanPremiumToProtocol: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'withdraw(address,uint256,address)'(
      asset: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;
  };
}
