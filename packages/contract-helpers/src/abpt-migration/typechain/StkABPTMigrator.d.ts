/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export interface StkABPTMigratorInterface extends utils.Interface {
  functions: {
    'STK_ABPT_V2()': FunctionFragment;
    'emergencyEtherTransfer(address,uint256)': FunctionFragment;
    'emergencyTokenTransfer(address,address,uint256)': FunctionFragment;
    'migrateStkABPT(uint256,uint256[],uint256)': FunctionFragment;
    'migrateStkABPTWithPermit(uint256,uint256,uint8,bytes32,bytes32,uint256[],uint256)': FunctionFragment;
    'whoCanRescue()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'STK_ABPT_V2'
      | 'emergencyEtherTransfer'
      | 'emergencyTokenTransfer'
      | 'migrateStkABPT'
      | 'migrateStkABPTWithPermit'
      | 'whoCanRescue',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'STK_ABPT_V2',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyEtherTransfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyTokenTransfer',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateStkABPT',
    values: [BigNumberish, BigNumberish[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateStkABPTWithPermit',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish[],
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'whoCanRescue',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'STK_ABPT_V2',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyEtherTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyTokenTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'migrateStkABPT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'migrateStkABPTWithPermit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whoCanRescue',
    data: BytesLike,
  ): Result;

  events: {
    'ERC20Rescued(address,address,address,uint256)': EventFragment;
    'NativeTokensRescued(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ERC20Rescued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NativeTokensRescued'): EventFragment;
}

export interface ERC20RescuedEventObject {
  caller: string;
  token: string;
  to: string;
  amount: BigNumber;
}
export type ERC20RescuedEvent = TypedEvent<
  [string, string, string, BigNumber],
  ERC20RescuedEventObject
>;

export type ERC20RescuedEventFilter = TypedEventFilter<ERC20RescuedEvent>;

export interface NativeTokensRescuedEventObject {
  caller: string;
  to: string;
  amount: BigNumber;
}
export type NativeTokensRescuedEvent = TypedEvent<
  [string, string, BigNumber],
  NativeTokensRescuedEventObject
>;

export type NativeTokensRescuedEventFilter =
  TypedEventFilter<NativeTokensRescuedEvent>;

export interface StkABPTMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StkABPTMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    STK_ABPT_V2(overrides?: CallOverrides): Promise<[string]>;

    emergencyEtherTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    emergencyTokenTransfer(
      erc20Token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    migrateStkABPT(
      amount: BigNumberish,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    migrateStkABPTWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    whoCanRescue(overrides?: CallOverrides): Promise<[string]>;
  };

  STK_ABPT_V2(overrides?: CallOverrides): Promise<string>;

  emergencyEtherTransfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  emergencyTokenTransfer(
    erc20Token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  migrateStkABPT(
    amount: BigNumberish,
    tokenOutAmountsMin: BigNumberish[],
    poolOutAmountMin: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  migrateStkABPTWithPermit(
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    tokenOutAmountsMin: BigNumberish[],
    poolOutAmountMin: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  whoCanRescue(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    STK_ABPT_V2(overrides?: CallOverrides): Promise<string>;

    emergencyEtherTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyTokenTransfer(
      erc20Token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    migrateStkABPT(
      amount: BigNumberish,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    migrateStkABPTWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    whoCanRescue(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ERC20Rescued(address,address,address,uint256)'(
      caller?: string | null,
      token?: string | null,
      to?: string | null,
      amount?: null,
    ): ERC20RescuedEventFilter;
    ERC20Rescued(
      caller?: string | null,
      token?: string | null,
      to?: string | null,
      amount?: null,
    ): ERC20RescuedEventFilter;

    'NativeTokensRescued(address,address,uint256)'(
      caller?: string | null,
      to?: string | null,
      amount?: null,
    ): NativeTokensRescuedEventFilter;
    NativeTokensRescued(
      caller?: string | null,
      to?: string | null,
      amount?: null,
    ): NativeTokensRescuedEventFilter;
  };

  estimateGas: {
    STK_ABPT_V2(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyEtherTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    emergencyTokenTransfer(
      erc20Token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    migrateStkABPT(
      amount: BigNumberish,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    migrateStkABPTWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    whoCanRescue(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    STK_ABPT_V2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyEtherTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    emergencyTokenTransfer(
      erc20Token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    migrateStkABPT(
      amount: BigNumberish,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    migrateStkABPTWithPermit(
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      tokenOutAmountsMin: BigNumberish[],
      poolOutAmountMin: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    whoCanRescue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
