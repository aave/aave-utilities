/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IStakedAaveV3Interface extends ethers.utils.Interface {
    functions: {
        "COOLDOWN_SECONDS()": FunctionFragment;
        'REWARD_TOKEN()': FunctionFragment;
        'STAKED_TOKEN()': FunctionFragment;
        "claimRewards(address,uint256)": FunctionFragment;
        "claimRewardsAndRedeem(address,uint256,uint256)": FunctionFragment;
        "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)": FunctionFragment;
        "claimRewardsAndStake(address,uint256)": FunctionFragment;
        "claimRewardsAndStakeOnBehalf(address,address,uint256)": FunctionFragment;
        "claimRewardsOnBehalf(address,address,uint256)": FunctionFragment;
        "cooldown()": FunctionFragment;
        "cooldownOnBehalfOf(address)": FunctionFragment;
        "getCooldownSeconds()": FunctionFragment;
        "getExchangeRate()": FunctionFragment;
        "getExchangeRateSnapshot(uint32)": FunctionFragment;
        "getExchangeRateSnapshotsCount()": FunctionFragment;
        "getMaxSlashablePercentage()": FunctionFragment;
        "getTotalRewardsBalance(address)": FunctionFragment;
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
        "previewRedeem(uint256)": FunctionFragment;
        "previewStake(uint256)": FunctionFragment;
        "redeem(address,uint256)": FunctionFragment;
        "redeemOnBehalf(address,address,uint256)": FunctionFragment;
        "stake(address,uint256)": FunctionFragment;
        "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "COOLDOWN_SECONDS",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'REWARD_TOKEN',
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: 'STAKED_TOKEN',
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewards",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewardsAndRedeem",
        values: [string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewardsAndRedeemOnBehalf",
        values: [string, string, BigNumberish, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewardsAndStake",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewardsAndStakeOnBehalf",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "claimRewardsOnBehalf",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "cooldown", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "cooldownOnBehalfOf",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "getCooldownSeconds",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getExchangeRate",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getExchangeRateSnapshot",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "getExchangeRateSnapshotsCount",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getMaxSlashablePercentage",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalRewardsBalance",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "permit",
        values: [
            string,
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "previewRedeem",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "previewStake",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "redeem",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "redeemOnBehalf",
        values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "stake",
        values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "stakeWithPermit",
        values: [
            string,
            BigNumberish,
            BigNumberish,
            BigNumberish,
            BytesLike,
            BytesLike
        ]
    ): string;

    decodeFunctionResult(
        functionFragment: "COOLDOWN_SECONDS",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'REWARD_TOKEN',
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: 'STAKED_TOKEN',
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewards",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewardsAndRedeem",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewardsAndRedeemOnBehalf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewardsAndStake",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewardsAndStakeOnBehalf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "claimRewardsOnBehalf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "cooldown", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "cooldownOnBehalfOf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getCooldownSeconds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getExchangeRate",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getExchangeRateSnapshot",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getExchangeRateSnapshotsCount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMaxSlashablePercentage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalRewardsBalance",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "previewRedeem",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "previewStake",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "redeemOnBehalf",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "stakeWithPermit",
        data: BytesLike
    ): Result;

    events: {
        "Cooldown(address,uint256)": EventFragment;
        "CooldownSecondsChanged(uint256)": EventFragment;
        "ExchangeRateChanged(uint216)": EventFragment;
        "FundsReturned(uint256)": EventFragment;
        "GHODebtTokenChanged(address)": EventFragment;
        "MaxSlashablePercentageChanged(uint256)": EventFragment;
        "Redeem(address,address,uint256,uint256)": EventFragment;
        "RewardsAccrued(address,uint256)": EventFragment;
        "RewardsClaimed(address,address,uint256)": EventFragment;
        "Slashed(address,uint256)": EventFragment;
        "SlashingExitWindowDurationChanged(uint256)": EventFragment;
        "SlashingSettled()": EventFragment;
        "Staked(address,address,uint256,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "Cooldown"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CooldownSecondsChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExchangeRateChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundsReturned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GHODebtTokenChanged"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "MaxSlashablePercentageChanged"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardsAccrued"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "SlashingExitWindowDurationChanged"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SlashingSettled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class IStakedAaveV3 extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: IStakedAaveV3Interface;

    functions: {
        COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<[BigNumber]>;

        "COOLDOWN_SECONDS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'REWARD_TOKEN()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        STAKED_TOKEN(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        'STAKED_TOKEN()'(overrides?: CallOverrides): Promise<{
            0: string;
        }>;

        claimRewards(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewards(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimRewardsAndRedeem(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewardsAndRedeem(address,uint256,uint256)"(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimRewardsAndRedeemOnBehalf(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)"(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimRewardsAndStake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewardsAndStake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimRewardsAndStakeOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewardsAndStakeOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimRewardsOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "claimRewardsOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        cooldown(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "cooldown()"(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        cooldownOnBehalfOf(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "cooldownOnBehalfOf(address)"(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getCooldownSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getCooldownSeconds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getExchangeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

        getExchangeRateSnapshot(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [[number, BigNumber] & { blockNumber: number; value: BigNumber }]
        >;

        "getExchangeRateSnapshot(uint32)"(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<
            [[number, BigNumber] & { blockNumber: number; value: BigNumber }]
        >;

        getExchangeRateSnapshotsCount(overrides?: CallOverrides): Promise<[number]>;

        "getExchangeRateSnapshotsCount()"(
            overrides?: CallOverrides
        ): Promise<[number]>;

        getMaxSlashablePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

        "getMaxSlashablePercentage()"(
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getTotalRewardsBalance(
            staker: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        "getTotalRewardsBalance(address)"(
            staker: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        previewRedeem(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        "previewRedeem(uint256)"(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        previewStake(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        "previewStake(uint256)"(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        redeem(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "redeem(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        redeemOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "redeemOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        stake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "stake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        stakeWithPermit(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)"(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;
    };

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    'REWARD_TOKEN()'(overrides?: CallOverrides): Promise<string>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

    'STAKED_TOKEN()'(overrides?: CallOverrides): Promise<string>;

    COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    "COOLDOWN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(address,uint256)"(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsAndRedeem(
        to: string,
        claimAmount: BigNumberish,
        redeemAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewardsAndRedeem(address,uint256,uint256)"(
        to: string,
        claimAmount: BigNumberish,
        redeemAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsAndRedeemOnBehalf(
        from: string,
        to: string,
        claimAmount: BigNumberish,
        redeemAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)"(
        from: string,
        to: string,
        claimAmount: BigNumberish,
        redeemAmount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsAndStake(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewardsAndStake(address,uint256)"(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsAndStakeOnBehalf(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewardsAndStakeOnBehalf(address,address,uint256)"(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRewardsOnBehalf(address,address,uint256)"(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldown(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cooldown()"(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldownOnBehalfOf(
        from: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cooldownOnBehalfOf(address)"(
        from: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCooldownSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    "getCooldownSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "getExchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateSnapshot(
        index: BigNumberish,
        overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

    "getExchangeRateSnapshot(uint32)"(
        index: BigNumberish,
        overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

    getExchangeRateSnapshotsCount(overrides?: CallOverrides): Promise<number>;

    "getExchangeRateSnapshotsCount()"(overrides?: CallOverrides): Promise<number>;

    getMaxSlashablePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxSlashablePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalRewardsBalance(
        staker: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalRewardsBalance(address)"(
        staker: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
        owner: string,
        spender: string,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
        owner: string,
        spender: string,
        value: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    previewRedeem(
        shares: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewRedeem(uint256)"(
        shares: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewStake(
        assets: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewStake(uint256)"(
        assets: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(address,uint256)"(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemOnBehalf(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemOnBehalf(address,address,uint256)"(
        from: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(address,uint256)"(
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeWithPermit(
        from: string,
        amount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)"(
        from: string,
        amount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

        'REWARD_TOKEN()'(overrides?: CallOverrides): Promise<string>;

        STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

        'STAKED_TOKEN()'(overrides?: CallOverrides): Promise<string>;

        COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

        "COOLDOWN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

        claimRewards(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "claimRewards(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        claimRewardsAndRedeem(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "claimRewardsAndRedeem(address,uint256,uint256)"(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        claimRewardsAndRedeemOnBehalf(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)"(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        claimRewardsAndStake(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "claimRewardsAndStake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        claimRewardsAndStakeOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "claimRewardsAndStakeOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        claimRewardsOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "claimRewardsOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        cooldown(overrides?: CallOverrides): Promise<void>;

        "cooldown()"(overrides?: CallOverrides): Promise<void>;

        cooldownOnBehalfOf(from: string, overrides?: CallOverrides): Promise<void>;

        "cooldownOnBehalfOf(address)"(
            from: string,
            overrides?: CallOverrides
        ): Promise<void>;

        getCooldownSeconds(overrides?: CallOverrides): Promise<BigNumber>;

        "getCooldownSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

        getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "getExchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        getExchangeRateSnapshot(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

        "getExchangeRateSnapshot(uint32)"(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[number, BigNumber] & { blockNumber: number; value: BigNumber }>;

        getExchangeRateSnapshotsCount(overrides?: CallOverrides): Promise<number>;

        "getExchangeRateSnapshotsCount()"(
            overrides?: CallOverrides
        ): Promise<number>;

        getMaxSlashablePercentage(overrides?: CallOverrides): Promise<BigNumber>;

        "getMaxSlashablePercentage()"(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTotalRewardsBalance(
            staker: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "getTotalRewardsBalance(address)"(
            staker: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        previewRedeem(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "previewRedeem(uint256)"(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        previewStake(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "previewStake(uint256)"(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        redeem(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "redeem(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        redeemOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "redeemOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "slash(address,uint256)"(
            destination: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        stake(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        "stake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        stakeWithPermit(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;

        "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)"(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        Cooldown(
            user: string | null,
            amount: null
        ): TypedEventFilter<
            [string, BigNumber],
            { user: string; amount: BigNumber }
        >;

        CooldownSecondsChanged(
            cooldownSeconds: null
        ): TypedEventFilter<[BigNumber], { cooldownSeconds: BigNumber }>;

        ExchangeRateChanged(
            exchangeRate: null
        ): TypedEventFilter<[BigNumber], { exchangeRate: BigNumber }>;

        FundsReturned(
            amount: null
        ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

        GHODebtTokenChanged(
            newDebtToken: string | null
        ): TypedEventFilter<[string], { newDebtToken: string }>;

        MaxSlashablePercentageChanged(
            newPercentage: null
        ): TypedEventFilter<[BigNumber], { newPercentage: BigNumber }>;

        Redeem(
            from: string | null,
            to: string | null,
            assets: null,
            shares: null
        ): TypedEventFilter<
            [string, string, BigNumber, BigNumber],
            { from: string; to: string; assets: BigNumber; shares: BigNumber }
        >;

        RewardsAccrued(
            user: null,
            amount: null
        ): TypedEventFilter<
            [string, BigNumber],
            { user: string; amount: BigNumber }
        >;

        RewardsClaimed(
            from: string | null,
            to: string | null,
            amount: null
        ): TypedEventFilter<
            [string, string, BigNumber],
            { from: string; to: string; amount: BigNumber }
        >;

        Slashed(
            destination: string | null,
            amount: null
        ): TypedEventFilter<
            [string, BigNumber],
            { destination: string; amount: BigNumber }
        >;

        SlashingExitWindowDurationChanged(
            windowSeconds: null
        ): TypedEventFilter<[BigNumber], { windowSeconds: BigNumber }>;

        SlashingSettled(): TypedEventFilter<[], {}>;

        Staked(
            from: string | null,
            to: string | null,
            assets: null,
            shares: null
        ): TypedEventFilter<
            [string, string, BigNumber, BigNumber],
            { from: string; to: string; assets: BigNumber; shares: BigNumber }
        >;
    };

    estimateGas: {
        REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

        'REWARD_TOKEN()'(overrides?: CallOverrides): Promise<BigNumber>;

        STAKED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

        'STAKED_TOKEN()'(overrides?: CallOverrides): Promise<BigNumber>;


        COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

        "COOLDOWN_SECONDS()"(overrides?: CallOverrides): Promise<BigNumber>;

        claimRewards(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewards(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimRewardsAndRedeem(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewardsAndRedeem(address,uint256,uint256)"(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimRewardsAndRedeemOnBehalf(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)"(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimRewardsAndStake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewardsAndStake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimRewardsAndStakeOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewardsAndStakeOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimRewardsOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "claimRewardsOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        cooldown(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "cooldown()"(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        cooldownOnBehalfOf(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "cooldownOnBehalfOf(address)"(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getCooldownSeconds(overrides?: CallOverrides): Promise<BigNumber>;

        "getCooldownSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

        getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

        "getExchangeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

        getExchangeRateSnapshot(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "getExchangeRateSnapshot(uint32)"(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getExchangeRateSnapshotsCount(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "getExchangeRateSnapshotsCount()"(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getMaxSlashablePercentage(overrides?: CallOverrides): Promise<BigNumber>;

        "getMaxSlashablePercentage()"(
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getTotalRewardsBalance(
            staker: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "getTotalRewardsBalance(address)"(
            staker: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        previewRedeem(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "previewRedeem(uint256)"(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        previewStake(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        "previewStake(uint256)"(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        redeem(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "redeem(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        redeemOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "redeemOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        stake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "stake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        stakeWithPermit(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)"(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        COOLDOWN_SECONDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "COOLDOWN_SECONDS()"(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'REWARD_TOKEN()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        STAKED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'STAKED_TOKEN()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        claimRewards(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewards(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimRewardsAndRedeem(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewardsAndRedeem(address,uint256,uint256)"(
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimRewardsAndRedeemOnBehalf(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewardsAndRedeemOnBehalf(address,address,uint256,uint256)"(
            from: string,
            to: string,
            claimAmount: BigNumberish,
            redeemAmount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimRewardsAndStake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewardsAndStake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimRewardsAndStakeOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewardsAndStakeOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimRewardsOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "claimRewardsOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        cooldown(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "cooldown()"(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        cooldownOnBehalfOf(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "cooldownOnBehalfOf(address)"(
            from: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getCooldownSeconds(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "getCooldownSeconds()"(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "getExchangeRate()"(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getExchangeRateSnapshot(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "getExchangeRateSnapshot(uint32)"(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getExchangeRateSnapshotsCount(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "getExchangeRateSnapshotsCount()"(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMaxSlashablePercentage(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "getMaxSlashablePercentage()"(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalRewardsBalance(
            staker: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "getTotalRewardsBalance(address)"(
            staker: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        permit(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
            owner: string,
            spender: string,
            value: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        previewRedeem(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "previewRedeem(uint256)"(
            shares: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        previewStake(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        "previewStake(uint256)"(
            assets: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        redeem(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "redeem(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        redeemOnBehalf(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "redeemOnBehalf(address,address,uint256)"(
            from: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        stake(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "stake(address,uint256)"(
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        stakeWithPermit(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "stakeWithPermit(address,uint256,uint256,uint8,bytes32,bytes32)"(
            from: string,
            amount: BigNumberish,
            deadline: BigNumberish,
            v: BigNumberish,
            r: BytesLike,
            s: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;
    };
}
