/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { Abi, AbiInterface } from '../Abi';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'stkAave',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ethUsdPriceFeed',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'aaveUsdPriceFeed',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'AAVE_USD_PRICE_FEED',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'ETH_USD_PRICE_FEED',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'STAKED_AAVE',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getStakedAssetData',
    inputs: [
      {
        name: 'stakedAsset',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'oracle',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenData',
        components: [
          {
            name: 'stakedTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenTotalRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeCooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeUnstakeWindow',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeApy',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'distributionPerSecond',
            type: 'uint128',
            internalType: 'uint128',
          },
          {
            name: 'inPostSlashingPeriod',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'distributionEnd',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getStakedAssetDataBatch',
    inputs: [
      {
        name: 'stakedAssets',
        type: 'address[]',
        internalType: 'address[]',
      },
      {
        name: 'oracles',
        type: 'address[]',
        internalType: 'address[]',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenData[]',
        components: [
          {
            name: 'stakedTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenTotalRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeCooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeUnstakeWindow',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeApy',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'distributionPerSecond',
            type: 'uint128',
            internalType: 'uint128',
          },
          {
            name: 'inPostSlashingPeriod',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'distributionEnd',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getStakedUserData',
    inputs: [
      {
        name: 'stakedAsset',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'oracle',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenData',
        components: [
          {
            name: 'stakedTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenTotalRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeCooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeUnstakeWindow',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeApy',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'distributionPerSecond',
            type: 'uint128',
            internalType: 'uint128',
          },
          {
            name: 'inPostSlashingPeriod',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'distributionEnd',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
      {
        name: '',
        type: 'tuple',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenUserData',
        components: [
          {
            name: 'stakedTokenUserBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'underlyingTokenUserBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardsToClaim',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'userCooldownTimestamp',
            type: 'uint40',
            internalType: 'uint40',
          },
          {
            name: 'userCooldownAmount',
            type: 'uint216',
            internalType: 'uint216',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getStakedUserDataBatch',
    inputs: [
      {
        name: 'stakedAssets',
        type: 'address[]',
        internalType: 'address[]',
      },
      {
        name: 'oracles',
        type: 'address[]',
        internalType: 'address[]',
      },
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenData[]',
        components: [
          {
            name: 'stakedTokenTotalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenTotalRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeCooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeUnstakeWindow',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardTokenPriceUsd',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakeApy',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'distributionPerSecond',
            type: 'uint128',
            internalType: 'uint128',
          },
          {
            name: 'inPostSlashingPeriod',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'distributionEnd',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct IStakedTokenDataProvider.StakedTokenUserData[]',
        components: [
          {
            name: 'stakedTokenUserBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'stakedTokenRedeemableAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'underlyingTokenUserBalance',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'rewardsToClaim',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'userCooldownTimestamp',
            type: 'uint40',
            internalType: 'uint40',
          },
          {
            name: 'userCooldownAmount',
            type: 'uint216',
            internalType: 'uint216',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
] as const;

export class Abi__factory {
  static readonly abi = _abi;
  static createInterface(): AbiInterface {
    return new utils.Interface(_abi) as AbiInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Abi {
    return new Contract(address, _abi, signerOrProvider) as Abi;
  }
}
