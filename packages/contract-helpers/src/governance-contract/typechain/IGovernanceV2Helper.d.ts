/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IGovernanceV2HelperInterface extends ethers.utils.Interface {
  functions: {
    'ONE_HUNDRED_WITH_PRECISION()': FunctionFragment;
    'delegateTokensBySig(address[],tuple[])': FunctionFragment;
    'delegateTokensByTypeBySig(address[],tuple[])': FunctionFragment;
    'getProposal(uint256,address)': FunctionFragment;
    'getProposals(uint256,uint256,address)': FunctionFragment;
    'getTokensPower(address,address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'ONE_HUNDRED_WITH_PRECISION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'delegateTokensBySig',
    values: [
      string[],
      {
        delegatee: string;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegateTokensByTypeBySig',
    values: [
      string[],
      {
        delegatee: string;
        delegationType: BigNumberish;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposal',
    values: [BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProposals',
    values: [BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTokensPower',
    values: [string, string[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'ONE_HUNDRED_WITH_PRECISION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'delegateTokensBySig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'delegateTokensByTypeBySig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getProposals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTokensPower',
    data: BytesLike,
  ): Result;

  events: {};
}

export class IGovernanceV2Helper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernanceV2HelperInterface;

  functions: {
    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateTokensBySig(
      tokens: string[],
      data: {
        delegatee: string;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateTokensByTypeBySig(
      tokens: string[],
      data: {
        delegatee: string;
        delegationType: BigNumberish;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getProposal(
      id: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string,
          number,
        ] & {
          totalVotingSupply: BigNumber;
          minimumQuorum: BigNumber;
          minimumDiff: BigNumber;
          executionTimeWithGracePeriod: BigNumber;
          proposalCreated: BigNumber;
          id: BigNumber;
          creator: string;
          executor: string;
          targets: string[];
          values: BigNumber[];
          signatures: string[];
          calldatas: string[];
          withDelegatecalls: boolean[];
          startBlock: BigNumber;
          endBlock: BigNumber;
          executionTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          canceled: boolean;
          strategy: string;
          ipfsHash: string;
          proposalState: number;
        },
      ] & {
        proposalStats: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string,
          number,
        ] & {
          totalVotingSupply: BigNumber;
          minimumQuorum: BigNumber;
          minimumDiff: BigNumber;
          executionTimeWithGracePeriod: BigNumber;
          proposalCreated: BigNumber;
          id: BigNumber;
          creator: string;
          executor: string;
          targets: string[];
          values: BigNumber[];
          signatures: string[];
          calldatas: string[];
          withDelegatecalls: boolean[];
          startBlock: BigNumber;
          endBlock: BigNumber;
          executionTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          canceled: boolean;
          strategy: string;
          ipfsHash: string;
          proposalState: number;
        };
      }
    >;

    getProposals(
      skip: BigNumberish,
      limit: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string,
          number,
        ] & {
          totalVotingSupply: BigNumber;
          minimumQuorum: BigNumber;
          minimumDiff: BigNumber;
          executionTimeWithGracePeriod: BigNumber;
          proposalCreated: BigNumber;
          id: BigNumber;
          creator: string;
          executor: string;
          targets: string[];
          values: BigNumber[];
          signatures: string[];
          calldatas: string[];
          withDelegatecalls: boolean[];
          startBlock: BigNumber;
          endBlock: BigNumber;
          executionTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          canceled: boolean;
          strategy: string;
          ipfsHash: string;
          proposalState: number;
        })[],
      ] & {
        proposalsStats: ([
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string[],
          BigNumber[],
          string[],
          string[],
          boolean[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          string,
          string,
          number,
        ] & {
          totalVotingSupply: BigNumber;
          minimumQuorum: BigNumber;
          minimumDiff: BigNumber;
          executionTimeWithGracePeriod: BigNumber;
          proposalCreated: BigNumber;
          id: BigNumber;
          creator: string;
          executor: string;
          targets: string[];
          values: BigNumber[];
          signatures: string[];
          calldatas: string[];
          withDelegatecalls: boolean[];
          startBlock: BigNumber;
          endBlock: BigNumber;
          executionTime: BigNumber;
          forVotes: BigNumber;
          againstVotes: BigNumber;
          executed: boolean;
          canceled: boolean;
          strategy: string;
          ipfsHash: string;
          proposalState: number;
        })[];
      }
    >;

    getTokensPower(
      user: string,
      tokens: string[],
      overrides?: CallOverrides,
    ): Promise<
      [
        ([BigNumber, string, BigNumber, string] & {
          votingPower: BigNumber;
          delegatedAddressVotingPower: string;
          propositionPower: BigNumber;
          delegatedAddressPropositionPower: string;
        })[],
      ] & {
        power: ([BigNumber, string, BigNumber, string] & {
          votingPower: BigNumber;
          delegatedAddressVotingPower: string;
          propositionPower: BigNumber;
          delegatedAddressPropositionPower: string;
        })[];
      }
    >;
  };

  ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  delegateTokensBySig(
    tokens: string[],
    data: {
      delegatee: string;
      nonce: BigNumberish;
      expiry: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateTokensByTypeBySig(
    tokens: string[],
    data: {
      delegatee: string;
      delegationType: BigNumberish;
      nonce: BigNumberish;
      expiry: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getProposal(
    id: BigNumberish,
    governance: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string[],
      BigNumber[],
      string[],
      string[],
      boolean[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string,
      string,
      number,
    ] & {
      totalVotingSupply: BigNumber;
      minimumQuorum: BigNumber;
      minimumDiff: BigNumber;
      executionTimeWithGracePeriod: BigNumber;
      proposalCreated: BigNumber;
      id: BigNumber;
      creator: string;
      executor: string;
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      withDelegatecalls: boolean[];
      startBlock: BigNumber;
      endBlock: BigNumber;
      executionTime: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      canceled: boolean;
      strategy: string;
      ipfsHash: string;
      proposalState: number;
    }
  >;

  getProposals(
    skip: BigNumberish,
    limit: BigNumberish,
    governance: string,
    overrides?: CallOverrides,
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string[],
      BigNumber[],
      string[],
      string[],
      boolean[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      string,
      string,
      number,
    ] & {
      totalVotingSupply: BigNumber;
      minimumQuorum: BigNumber;
      minimumDiff: BigNumber;
      executionTimeWithGracePeriod: BigNumber;
      proposalCreated: BigNumber;
      id: BigNumber;
      creator: string;
      executor: string;
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      withDelegatecalls: boolean[];
      startBlock: BigNumber;
      endBlock: BigNumber;
      executionTime: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      canceled: boolean;
      strategy: string;
      ipfsHash: string;
      proposalState: number;
    })[]
  >;

  getTokensPower(
    user: string,
    tokens: string[],
    overrides?: CallOverrides,
  ): Promise<
    ([BigNumber, string, BigNumber, string] & {
      votingPower: BigNumber;
      delegatedAddressVotingPower: string;
      propositionPower: BigNumber;
      delegatedAddressPropositionPower: string;
    })[]
  >;

  callStatic: {
    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    delegateTokensBySig(
      tokens: string[],
      data: {
        delegatee: string;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    delegateTokensByTypeBySig(
      tokens: string[],
      data: {
        delegatee: string;
        delegationType: BigNumberish;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getProposal(
      id: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string[],
        BigNumber[],
        string[],
        string[],
        boolean[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        number,
      ] & {
        totalVotingSupply: BigNumber;
        minimumQuorum: BigNumber;
        minimumDiff: BigNumber;
        executionTimeWithGracePeriod: BigNumber;
        proposalCreated: BigNumber;
        id: BigNumber;
        creator: string;
        executor: string;
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
        withDelegatecalls: boolean[];
        startBlock: BigNumber;
        endBlock: BigNumber;
        executionTime: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        executed: boolean;
        canceled: boolean;
        strategy: string;
        ipfsHash: string;
        proposalState: number;
      }
    >;

    getProposals(
      skip: BigNumberish,
      limit: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string[],
        BigNumber[],
        string[],
        string[],
        boolean[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string,
        number,
      ] & {
        totalVotingSupply: BigNumber;
        minimumQuorum: BigNumber;
        minimumDiff: BigNumber;
        executionTimeWithGracePeriod: BigNumber;
        proposalCreated: BigNumber;
        id: BigNumber;
        creator: string;
        executor: string;
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
        withDelegatecalls: boolean[];
        startBlock: BigNumber;
        endBlock: BigNumber;
        executionTime: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        executed: boolean;
        canceled: boolean;
        strategy: string;
        ipfsHash: string;
        proposalState: number;
      })[]
    >;

    getTokensPower(
      user: string,
      tokens: string[],
      overrides?: CallOverrides,
    ): Promise<
      ([BigNumber, string, BigNumber, string] & {
        votingPower: BigNumber;
        delegatedAddressVotingPower: string;
        propositionPower: BigNumber;
        delegatedAddressPropositionPower: string;
      })[]
    >;
  };

  filters: {};

  estimateGas: {
    ONE_HUNDRED_WITH_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    delegateTokensBySig(
      tokens: string[],
      data: {
        delegatee: string;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegateTokensByTypeBySig(
      tokens: string[],
      data: {
        delegatee: string;
        delegationType: BigNumberish;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getProposal(
      id: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getProposals(
      skip: BigNumberish,
      limit: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTokensPower(
      user: string,
      tokens: string[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE_HUNDRED_WITH_PRECISION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    delegateTokensBySig(
      tokens: string[],
      data: {
        delegatee: string;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateTokensByTypeBySig(
      tokens: string[],
      data: {
        delegatee: string;
        delegationType: BigNumberish;
        nonce: BigNumberish;
        expiry: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProposals(
      skip: BigNumberish,
      limit: BigNumberish,
      governance: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTokensPower(
      user: string,
      tokens: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
