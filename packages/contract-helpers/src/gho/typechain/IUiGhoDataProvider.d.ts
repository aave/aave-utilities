/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace IUiGhoDataProvider {
  export type GhoReserveDataStruct = {
    ghoBaseVariableBorrowRate: PromiseOrValue<BigNumberish>;
    ghoDiscountedPerToken: PromiseOrValue<BigNumberish>;
    ghoDiscountRate: PromiseOrValue<BigNumberish>;
    ghoMinDebtTokenBalanceForDiscount: PromiseOrValue<BigNumberish>;
    ghoMinDiscountTokenBalanceForDiscount: PromiseOrValue<BigNumberish>;
    ghoReserveLastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    ghoCurrentBorrowIndex: PromiseOrValue<BigNumberish>;
    aaveFacilitatorBucketLevel: PromiseOrValue<BigNumberish>;
    aaveFacilitatorBucketMaxCapacity: PromiseOrValue<BigNumberish>;
  };

  export type GhoReserveDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    ghoBaseVariableBorrowRate: BigNumber;
    ghoDiscountedPerToken: BigNumber;
    ghoDiscountRate: BigNumber;
    ghoMinDebtTokenBalanceForDiscount: BigNumber;
    ghoMinDiscountTokenBalanceForDiscount: BigNumber;
    ghoReserveLastUpdateTimestamp: number;
    ghoCurrentBorrowIndex: BigNumber;
    aaveFacilitatorBucketLevel: BigNumber;
    aaveFacilitatorBucketMaxCapacity: BigNumber;
  };

  export type GhoUserDataStruct = {
    userGhoDiscountPercent: PromiseOrValue<BigNumberish>;
    userDiscountTokenBalance: PromiseOrValue<BigNumberish>;
    userPreviousGhoBorrowIndex: PromiseOrValue<BigNumberish>;
    userGhoScaledBorrowBalance: PromiseOrValue<BigNumberish>;
  };

  export type GhoUserDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    userGhoDiscountPercent: BigNumber;
    userDiscountTokenBalance: BigNumber;
    userPreviousGhoBorrowIndex: BigNumber;
    userGhoScaledBorrowBalance: BigNumber;
  };
}

export interface IUiGhoDataProviderInterface extends utils.Interface {
  functions: {
    "getGhoReserveData()": FunctionFragment;
    "getGhoUserData(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getGhoReserveData" | "getGhoUserData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGhoReserveData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGhoUserData",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGhoReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGhoUserData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUiGhoDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUiGhoDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGhoReserveData(
      overrides?: CallOverrides
    ): Promise<[IUiGhoDataProvider.GhoReserveDataStructOutput]>;

    getGhoUserData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IUiGhoDataProvider.GhoUserDataStructOutput]>;
  };

  getGhoReserveData(
    overrides?: CallOverrides
  ): Promise<IUiGhoDataProvider.GhoReserveDataStructOutput>;

  getGhoUserData(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IUiGhoDataProvider.GhoUserDataStructOutput>;

  callStatic: {
    getGhoReserveData(
      overrides?: CallOverrides
    ): Promise<IUiGhoDataProvider.GhoReserveDataStructOutput>;

    getGhoUserData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IUiGhoDataProvider.GhoUserDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    getGhoReserveData(overrides?: CallOverrides): Promise<BigNumber>;

    getGhoUserData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGhoReserveData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGhoUserData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
