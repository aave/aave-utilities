/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { IGhoToken, IGhoTokenInterface } from './IGhoToken';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'facilitatorAaddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldLevel',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newLevel',
        type: 'uint256',
      },
    ],
    name: 'BucketLevelChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'facilitatorAddress',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'string',
        name: 'label',
        type: 'string',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'initialBucketCapacity',
        type: 'uint256',
      },
    ],
    name: 'FacilitatorAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'facilitatorAaddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldCapacity',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newCapacity',
        type: 'uint256',
      },
    ],
    name: 'FacilitatorBucketCapacityUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'facilitatorAddress',
        type: 'address',
      },
    ],
    name: 'FacilitatorRemoved',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'facilitatorsAddresses',
        type: 'address[]',
      },
      {
        components: [
          {
            components: [
              {
                internalType: 'uint128',
                name: 'maxCapacity',
                type: 'uint128',
              },
              {
                internalType: 'uint128',
                name: 'level',
                type: 'uint128',
              },
            ],
            internalType: 'struct IGhoToken.Bucket',
            name: 'bucket',
            type: 'tuple',
          },
          {
            internalType: 'string',
            name: 'label',
            type: 'string',
          },
        ],
        internalType: 'struct IGhoToken.Facilitator[]',
        name: 'facilitatorsConfig',
        type: 'tuple[]',
      },
    ],
    name: 'addFacilitators',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'facilitator',
        type: 'address',
      },
    ],
    name: 'getFacilitator',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint128',
                name: 'maxCapacity',
                type: 'uint128',
              },
              {
                internalType: 'uint128',
                name: 'level',
                type: 'uint128',
              },
            ],
            internalType: 'struct IGhoToken.Bucket',
            name: 'bucket',
            type: 'tuple',
          },
          {
            internalType: 'string',
            name: 'label',
            type: 'string',
          },
        ],
        internalType: 'struct IGhoToken.Facilitator',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'facilitator',
        type: 'address',
      },
    ],
    name: 'getFacilitatorBucket',
    outputs: [
      {
        components: [
          {
            internalType: 'uint128',
            name: 'maxCapacity',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'level',
            type: 'uint128',
          },
        ],
        internalType: 'struct IGhoToken.Bucket',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getFacilitatorsList',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'facilitators',
        type: 'address[]',
      },
    ],
    name: 'removeFacilitators',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'facilitator',
        type: 'address',
      },
      {
        internalType: 'uint128',
        name: 'newCapacity',
        type: 'uint128',
      },
    ],
    name: 'setFacilitatorBucketCapacity',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IGhoToken__factory {
  static readonly abi = _abi;
  static createInterface(): IGhoTokenInterface {
    return new utils.Interface(_abi) as IGhoTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): IGhoToken {
    return new Contract(address, _abi, signerOrProvider) as IGhoToken;
  }
}
