/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../../../common';

export interface GhoVariableDebtTokenInterface extends utils.Interface {
  functions: {
    'DEBT_TOKEN_REVISION()': FunctionFragment;
    'DELEGATION_WITH_SIG_TYPEHASH()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'EIP712_REVISION()': FunctionFragment;
    'POOL()': FunctionFragment;
    'UNDERLYING_ASSET_ADDRESS()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveDelegation(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowAllowance(address,address)': FunctionFragment;
    'burn(address,uint256,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'decreaseBalanceFromInterest(address,uint256)': FunctionFragment;
    'delegationWithSig(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'getAToken()': FunctionFragment;
    'getBalanceFromInterest(address)': FunctionFragment;
    'getDiscountLockPeriod()': FunctionFragment;
    'getDiscountPercent(address)': FunctionFragment;
    'getDiscountRateStrategy()': FunctionFragment;
    'getDiscountToken()': FunctionFragment;
    'getIncentivesController()': FunctionFragment;
    'getPreviousIndex(address)': FunctionFragment;
    'getScaledUserBalanceAndSupply(address)': FunctionFragment;
    'getUserRebalanceTimestamp(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,uint8,string,string,bytes)': FunctionFragment;
    'mint(address,address,uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'rebalanceUserDiscountPercent(address)': FunctionFragment;
    'scaledBalanceOf(address)': FunctionFragment;
    'scaledTotalSupply()': FunctionFragment;
    'setAToken(address)': FunctionFragment;
    'setIncentivesController(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateDiscountDistribution(address,address,uint256,uint256,uint256)': FunctionFragment;
    'updateDiscountLockPeriod(uint256)': FunctionFragment;
    'updateDiscountRateStrategy(address)': FunctionFragment;
    'updateDiscountToken(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEBT_TOKEN_REVISION'
      | 'DELEGATION_WITH_SIG_TYPEHASH'
      | 'DOMAIN_SEPARATOR'
      | 'EIP712_REVISION'
      | 'POOL'
      | 'UNDERLYING_ASSET_ADDRESS'
      | 'allowance'
      | 'approve'
      | 'approveDelegation'
      | 'balanceOf'
      | 'borrowAllowance'
      | 'burn'
      | 'decimals'
      | 'decreaseAllowance'
      | 'decreaseBalanceFromInterest'
      | 'delegationWithSig'
      | 'getAToken'
      | 'getBalanceFromInterest'
      | 'getDiscountLockPeriod'
      | 'getDiscountPercent'
      | 'getDiscountRateStrategy'
      | 'getDiscountToken'
      | 'getIncentivesController'
      | 'getPreviousIndex'
      | 'getScaledUserBalanceAndSupply'
      | 'getUserRebalanceTimestamp'
      | 'increaseAllowance'
      | 'initialize'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'rebalanceUserDiscountPercent'
      | 'scaledBalanceOf'
      | 'scaledTotalSupply'
      | 'setAToken'
      | 'setIncentivesController'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'updateDiscountDistribution'
      | 'updateDiscountLockPeriod'
      | 'updateDiscountRateStrategy'
      | 'updateDiscountToken',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'DEBT_TOKEN_REVISION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'DELEGATION_WITH_SIG_TYPEHASH',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'DOMAIN_SEPARATOR',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'EIP712_REVISION',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'POOL', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'UNDERLYING_ASSET_ADDRESS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'approveDelegation',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowance',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseBalanceFromInterest',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegationWithSig',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getAToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBalanceFromInterest',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountLockPeriod',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountPercent',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountRateStrategy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getIncentivesController',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPreviousIndex',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getScaledUserBalanceAndSupply',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRebalanceTimestamp',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, BigNumberish, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rebalanceUserDiscountPercent',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'scaledBalanceOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'scaledTotalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'setAToken', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setIncentivesController',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountDistribution',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountLockPeriod',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountRateStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountToken',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'DEBT_TOKEN_REVISION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'DELEGATION_WITH_SIG_TYPEHASH',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'DOMAIN_SEPARATOR',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'EIP712_REVISION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'POOL', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'UNDERLYING_ASSET_ADDRESS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approveDelegation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'borrowAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseBalanceFromInterest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'delegationWithSig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getAToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getBalanceFromInterest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountLockPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountPercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountRateStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getIncentivesController',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPreviousIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getScaledUserBalanceAndSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserRebalanceTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceUserDiscountPercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'scaledBalanceOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'scaledTotalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setIncentivesController',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountDistribution',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountLockPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountRateStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountToken',
    data: BytesLike,
  ): Result;

  events: {
    'ATokenSet(address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'BorrowAllowanceDelegated(address,address,address,uint256)': EventFragment;
    'Burn(address,address,uint256,uint256,uint256)': EventFragment;
    'DiscountLockPeriodUpdated(uint256,uint256)': EventFragment;
    'DiscountPercentLocked(address,uint256,uint256)': EventFragment;
    'DiscountRateStrategyUpdated(address,address)': EventFragment;
    'DiscountTokenUpdated(address,address)': EventFragment;
    'Initialized(address,address,address,uint8,string,string,bytes)': EventFragment;
    'Mint(address,address,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ATokenSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowAllowanceDelegated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountLockPeriodUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountPercentLocked'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DiscountRateStrategyUpdated',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ATokenSetEventObject {
  aToken: string;
}
export type ATokenSetEvent = TypedEvent<[string], ATokenSetEventObject>;

export type ATokenSetEventFilter = TypedEventFilter<ATokenSetEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowAllowanceDelegatedEventObject {
  fromUser: string;
  toUser: string;
  asset: string;
  amount: BigNumber;
}
export type BorrowAllowanceDelegatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  BorrowAllowanceDelegatedEventObject
>;

export type BorrowAllowanceDelegatedEventFilter =
  TypedEventFilter<BorrowAllowanceDelegatedEvent>;

export interface BurnEventObject {
  from: string;
  target: string;
  value: BigNumber;
  balanceIncrease: BigNumber;
  index: BigNumber;
}
export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface DiscountLockPeriodUpdatedEventObject {
  oldDiscountLockPeriod: BigNumber;
  newDiscountLockPeriod: BigNumber;
}
export type DiscountLockPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DiscountLockPeriodUpdatedEventObject
>;

export type DiscountLockPeriodUpdatedEventFilter =
  TypedEventFilter<DiscountLockPeriodUpdatedEvent>;

export interface DiscountPercentLockedEventObject {
  user: string;
  discountPercent: BigNumber;
  rebalanceTimestamp: BigNumber;
}
export type DiscountPercentLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DiscountPercentLockedEventObject
>;

export type DiscountPercentLockedEventFilter =
  TypedEventFilter<DiscountPercentLockedEvent>;

export interface DiscountRateStrategyUpdatedEventObject {
  oldDiscountRateStrategy: string;
  newDiscountRateStrategy: string;
}
export type DiscountRateStrategyUpdatedEvent = TypedEvent<
  [string, string],
  DiscountRateStrategyUpdatedEventObject
>;

export type DiscountRateStrategyUpdatedEventFilter =
  TypedEventFilter<DiscountRateStrategyUpdatedEvent>;

export interface DiscountTokenUpdatedEventObject {
  oldDiscountToken: string;
  newDiscountToken: string;
}
export type DiscountTokenUpdatedEvent = TypedEvent<
  [string, string],
  DiscountTokenUpdatedEventObject
>;

export type DiscountTokenUpdatedEventFilter =
  TypedEventFilter<DiscountTokenUpdatedEvent>;

export interface InitializedEventObject {
  underlyingAsset: string;
  pool: string;
  incentivesController: string;
  debtTokenDecimals: number;
  debtTokenName: string;
  debtTokenSymbol: string;
  params: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, number, string, string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintEventObject {
  caller: string;
  onBehalfOf: string;
  value: BigNumber;
  balanceIncrease: BigNumber;
  index: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface GhoVariableDebtToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GhoVariableDebtTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEBT_TOKEN_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    DELEGATION_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<[string]>;

    POOL(overrides?: CallOverrides): Promise<[string]>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegationWithSig(
      delegator: string,
      delegatee: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAToken(overrides?: CallOverrides): Promise<[string]>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<[string]>;

    getDiscountToken(overrides?: CallOverrides): Promise<[string]>;

    getIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    increaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      initializingPool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DEBT_TOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  DELEGATION_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

  POOL(overrides?: CallOverrides): Promise<string>;

  UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveDelegation(
    delegatee: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowAllowance(
    fromUser: string,
    toUser: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  burn(
    from: string,
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decreaseBalanceFromInterest(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegationWithSig(
    delegator: string,
    delegatee: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAToken(overrides?: CallOverrides): Promise<string>;

  getBalanceFromInterest(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getDiscountPercent(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDiscountRateStrategy(overrides?: CallOverrides): Promise<string>;

  getDiscountToken(overrides?: CallOverrides): Promise<string>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  getPreviousIndex(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getScaledUserBalanceAndSupply(
    user: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  getUserRebalanceTimestamp(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increaseAllowance(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    initializingPool: string,
    underlyingAsset: string,
    incentivesController: string,
    debtTokenDecimals: BigNumberish,
    debtTokenName: string,
    debtTokenSymbol: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint(
    user: string,
    onBehalfOf: string,
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  rebalanceUserDiscountPercent(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  scaledBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setAToken(
    ghoAToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setIncentivesController(
    controller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountDistribution(
    sender: string,
    recipient: string,
    senderDiscountTokenBalance: BigNumberish,
    recipientDiscountTokenBalance: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountLockPeriod(
    newLockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountRateStrategy(
    newDiscountRateStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountToken(
    newDiscountToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEBT_TOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

    POOL(overrides?: CallOverrides): Promise<string>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegationWithSig(
      delegator: string,
      delegatee: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAToken(overrides?: CallOverrides): Promise<string>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<string>;

    getDiscountToken(overrides?: CallOverrides): Promise<string>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      initializingPool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setAToken(ghoAToken: string, overrides?: CallOverrides): Promise<void>;

    setIncentivesController(
      controller: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ATokenSet(address)'(aToken?: string | null): ATokenSetEventFilter;
    ATokenSet(aToken?: string | null): ATokenSetEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;

    'BorrowAllowanceDelegated(address,address,address,uint256)'(
      fromUser?: string | null,
      toUser?: string | null,
      asset?: string | null,
      amount?: null,
    ): BorrowAllowanceDelegatedEventFilter;
    BorrowAllowanceDelegated(
      fromUser?: string | null,
      toUser?: string | null,
      asset?: string | null,
      amount?: null,
    ): BorrowAllowanceDelegatedEventFilter;

    'Burn(address,address,uint256,uint256,uint256)'(
      from?: string | null,
      target?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): BurnEventFilter;
    Burn(
      from?: string | null,
      target?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): BurnEventFilter;

    'DiscountLockPeriodUpdated(uint256,uint256)'(
      oldDiscountLockPeriod?: BigNumberish | null,
      newDiscountLockPeriod?: BigNumberish | null,
    ): DiscountLockPeriodUpdatedEventFilter;
    DiscountLockPeriodUpdated(
      oldDiscountLockPeriod?: BigNumberish | null,
      newDiscountLockPeriod?: BigNumberish | null,
    ): DiscountLockPeriodUpdatedEventFilter;

    'DiscountPercentLocked(address,uint256,uint256)'(
      user?: string | null,
      discountPercent?: BigNumberish | null,
      rebalanceTimestamp?: BigNumberish | null,
    ): DiscountPercentLockedEventFilter;
    DiscountPercentLocked(
      user?: string | null,
      discountPercent?: BigNumberish | null,
      rebalanceTimestamp?: BigNumberish | null,
    ): DiscountPercentLockedEventFilter;

    'DiscountRateStrategyUpdated(address,address)'(
      oldDiscountRateStrategy?: string | null,
      newDiscountRateStrategy?: string | null,
    ): DiscountRateStrategyUpdatedEventFilter;
    DiscountRateStrategyUpdated(
      oldDiscountRateStrategy?: string | null,
      newDiscountRateStrategy?: string | null,
    ): DiscountRateStrategyUpdatedEventFilter;

    'DiscountTokenUpdated(address,address)'(
      oldDiscountToken?: string | null,
      newDiscountToken?: string | null,
    ): DiscountTokenUpdatedEventFilter;
    DiscountTokenUpdated(
      oldDiscountToken?: string | null,
      newDiscountToken?: string | null,
    ): DiscountTokenUpdatedEventFilter;

    'Initialized(address,address,address,uint8,string,string,bytes)'(
      underlyingAsset?: string | null,
      pool?: string | null,
      incentivesController?: null,
      debtTokenDecimals?: null,
      debtTokenName?: null,
      debtTokenSymbol?: null,
      params?: null,
    ): InitializedEventFilter;
    Initialized(
      underlyingAsset?: string | null,
      pool?: string | null,
      incentivesController?: null,
      debtTokenDecimals?: null,
      debtTokenName?: null,
      debtTokenSymbol?: null,
      params?: null,
    ): InitializedEventFilter;

    'Mint(address,address,uint256,uint256,uint256)'(
      caller?: string | null,
      onBehalfOf?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): MintEventFilter;
    Mint(
      caller?: string | null,
      onBehalfOf?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): MintEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    DEBT_TOKEN_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegationWithSig(
      delegator: string,
      delegatee: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountToken(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      initializingPool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEBT_TOKEN_REVISION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DELEGATION_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_ASSET_ADDRESS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveDelegation(
      delegatee: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    borrowAllowance(
      fromUser: string,
      toUser: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegationWithSig(
      delegator: string,
      delegatee: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountLockPeriod(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountRateStrategy(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivesController(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      initializingPool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setIncentivesController(
      controller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
