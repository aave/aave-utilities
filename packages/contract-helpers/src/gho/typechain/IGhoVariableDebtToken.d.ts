/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../../../../../../common';

export interface IGhoVariableDebtTokenInterface extends utils.Interface {
  functions: {
    'UNDERLYING_ASSET_ADDRESS()': FunctionFragment;
    'burn(address,uint256,uint256)': FunctionFragment;
    'decreaseBalanceFromInterest(address,uint256)': FunctionFragment;
    'getAToken()': FunctionFragment;
    'getBalanceFromInterest(address)': FunctionFragment;
    'getDiscountLockPeriod()': FunctionFragment;
    'getDiscountPercent(address)': FunctionFragment;
    'getDiscountRateStrategy()': FunctionFragment;
    'getDiscountToken()': FunctionFragment;
    'getPreviousIndex(address)': FunctionFragment;
    'getScaledUserBalanceAndSupply(address)': FunctionFragment;
    'getUserRebalanceTimestamp(address)': FunctionFragment;
    'initialize(address,address,address,uint8,string,string,bytes)': FunctionFragment;
    'mint(address,address,uint256,uint256)': FunctionFragment;
    'rebalanceUserDiscountPercent(address)': FunctionFragment;
    'scaledBalanceOf(address)': FunctionFragment;
    'scaledTotalSupply()': FunctionFragment;
    'setAToken(address)': FunctionFragment;
    'updateDiscountDistribution(address,address,uint256,uint256,uint256)': FunctionFragment;
    'updateDiscountLockPeriod(uint256)': FunctionFragment;
    'updateDiscountRateStrategy(address)': FunctionFragment;
    'updateDiscountToken(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'UNDERLYING_ASSET_ADDRESS'
      | 'burn'
      | 'decreaseBalanceFromInterest'
      | 'getAToken'
      | 'getBalanceFromInterest'
      | 'getDiscountLockPeriod'
      | 'getDiscountPercent'
      | 'getDiscountRateStrategy'
      | 'getDiscountToken'
      | 'getPreviousIndex'
      | 'getScaledUserBalanceAndSupply'
      | 'getUserRebalanceTimestamp'
      | 'initialize'
      | 'mint'
      | 'rebalanceUserDiscountPercent'
      | 'scaledBalanceOf'
      | 'scaledTotalSupply'
      | 'setAToken'
      | 'updateDiscountDistribution'
      | 'updateDiscountLockPeriod'
      | 'updateDiscountRateStrategy'
      | 'updateDiscountToken',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'UNDERLYING_ASSET_ADDRESS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseBalanceFromInterest',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getAToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBalanceFromInterest',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountLockPeriod',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountPercent',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountRateStrategy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDiscountToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPreviousIndex',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getScaledUserBalanceAndSupply',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRebalanceTimestamp',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, BigNumberish, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'rebalanceUserDiscountPercent',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'scaledBalanceOf',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'scaledTotalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'setAToken', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountDistribution',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountLockPeriod',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountRateStrategy',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDiscountToken',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'UNDERLYING_ASSET_ADDRESS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseBalanceFromInterest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getAToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getBalanceFromInterest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountLockPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountPercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountRateStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDiscountToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPreviousIndex',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getScaledUserBalanceAndSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserRebalanceTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rebalanceUserDiscountPercent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'scaledBalanceOf',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'scaledTotalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setAToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountDistribution',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountLockPeriod',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountRateStrategy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateDiscountToken',
    data: BytesLike,
  ): Result;

  events: {
    'ATokenSet(address)': EventFragment;
    'Burn(address,address,uint256,uint256,uint256)': EventFragment;
    'DiscountLockPeriodUpdated(uint256,uint256)': EventFragment;
    'DiscountPercentLocked(address,uint256,uint256)': EventFragment;
    'DiscountRateStrategyUpdated(address,address)': EventFragment;
    'DiscountTokenUpdated(address,address)': EventFragment;
    'Initialized(address,address,address,uint8,string,string,bytes)': EventFragment;
    'Mint(address,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ATokenSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountLockPeriodUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountPercentLocked'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'DiscountRateStrategyUpdated',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DiscountTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
}

export interface ATokenSetEventObject {
  aToken: string;
}
export type ATokenSetEvent = TypedEvent<[string], ATokenSetEventObject>;

export type ATokenSetEventFilter = TypedEventFilter<ATokenSetEvent>;

export interface BurnEventObject {
  from: string;
  target: string;
  value: BigNumber;
  balanceIncrease: BigNumber;
  index: BigNumber;
}
export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface DiscountLockPeriodUpdatedEventObject {
  oldDiscountLockPeriod: BigNumber;
  newDiscountLockPeriod: BigNumber;
}
export type DiscountLockPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DiscountLockPeriodUpdatedEventObject
>;

export type DiscountLockPeriodUpdatedEventFilter =
  TypedEventFilter<DiscountLockPeriodUpdatedEvent>;

export interface DiscountPercentLockedEventObject {
  user: string;
  discountPercent: BigNumber;
  rebalanceTimestamp: BigNumber;
}
export type DiscountPercentLockedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DiscountPercentLockedEventObject
>;

export type DiscountPercentLockedEventFilter =
  TypedEventFilter<DiscountPercentLockedEvent>;

export interface DiscountRateStrategyUpdatedEventObject {
  oldDiscountRateStrategy: string;
  newDiscountRateStrategy: string;
}
export type DiscountRateStrategyUpdatedEvent = TypedEvent<
  [string, string],
  DiscountRateStrategyUpdatedEventObject
>;

export type DiscountRateStrategyUpdatedEventFilter =
  TypedEventFilter<DiscountRateStrategyUpdatedEvent>;

export interface DiscountTokenUpdatedEventObject {
  oldDiscountToken: string;
  newDiscountToken: string;
}
export type DiscountTokenUpdatedEvent = TypedEvent<
  [string, string],
  DiscountTokenUpdatedEventObject
>;

export type DiscountTokenUpdatedEventFilter =
  TypedEventFilter<DiscountTokenUpdatedEvent>;

export interface InitializedEventObject {
  underlyingAsset: string;
  pool: string;
  incentivesController: string;
  debtTokenDecimals: number;
  debtTokenName: string;
  debtTokenSymbol: string;
  params: string;
}
export type InitializedEvent = TypedEvent<
  [string, string, string, number, string, string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MintEventObject {
  caller: string;
  onBehalfOf: string;
  value: BigNumber;
  balanceIncrease: BigNumber;
  index: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface IGhoVariableDebtToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGhoVariableDebtTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAToken(overrides?: CallOverrides): Promise<[string]>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<[string]>;

    getDiscountToken(overrides?: CallOverrides): Promise<[string]>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(
      pool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  burn(
    from: string,
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decreaseBalanceFromInterest(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAToken(overrides?: CallOverrides): Promise<string>;

  getBalanceFromInterest(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getDiscountPercent(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDiscountRateStrategy(overrides?: CallOverrides): Promise<string>;

  getDiscountToken(overrides?: CallOverrides): Promise<string>;

  getPreviousIndex(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getScaledUserBalanceAndSupply(
    user: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  getUserRebalanceTimestamp(
    user: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialize(
    pool: string,
    underlyingAsset: string,
    incentivesController: string,
    debtTokenDecimals: BigNumberish,
    debtTokenName: string,
    debtTokenSymbol: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint(
    user: string,
    onBehalfOf: string,
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rebalanceUserDiscountPercent(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  scaledBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setAToken(
    ghoAToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountDistribution(
    sender: string,
    recipient: string,
    senderDiscountTokenBalance: BigNumberish,
    recipientDiscountTokenBalance: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountLockPeriod(
    newLockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountRateStrategy(
    newDiscountRateStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDiscountToken(
    newDiscountToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAToken(overrides?: CallOverrides): Promise<string>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<string>;

    getDiscountToken(overrides?: CallOverrides): Promise<string>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      pool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setAToken(ghoAToken: string, overrides?: CallOverrides): Promise<void>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ATokenSet(address)'(aToken?: string | null): ATokenSetEventFilter;
    ATokenSet(aToken?: string | null): ATokenSetEventFilter;

    'Burn(address,address,uint256,uint256,uint256)'(
      from?: string | null,
      target?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): BurnEventFilter;
    Burn(
      from?: string | null,
      target?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): BurnEventFilter;

    'DiscountLockPeriodUpdated(uint256,uint256)'(
      oldDiscountLockPeriod?: BigNumberish | null,
      newDiscountLockPeriod?: BigNumberish | null,
    ): DiscountLockPeriodUpdatedEventFilter;
    DiscountLockPeriodUpdated(
      oldDiscountLockPeriod?: BigNumberish | null,
      newDiscountLockPeriod?: BigNumberish | null,
    ): DiscountLockPeriodUpdatedEventFilter;

    'DiscountPercentLocked(address,uint256,uint256)'(
      user?: string | null,
      discountPercent?: BigNumberish | null,
      rebalanceTimestamp?: BigNumberish | null,
    ): DiscountPercentLockedEventFilter;
    DiscountPercentLocked(
      user?: string | null,
      discountPercent?: BigNumberish | null,
      rebalanceTimestamp?: BigNumberish | null,
    ): DiscountPercentLockedEventFilter;

    'DiscountRateStrategyUpdated(address,address)'(
      oldDiscountRateStrategy?: string | null,
      newDiscountRateStrategy?: string | null,
    ): DiscountRateStrategyUpdatedEventFilter;
    DiscountRateStrategyUpdated(
      oldDiscountRateStrategy?: string | null,
      newDiscountRateStrategy?: string | null,
    ): DiscountRateStrategyUpdatedEventFilter;

    'DiscountTokenUpdated(address,address)'(
      oldDiscountToken?: string | null,
      newDiscountToken?: string | null,
    ): DiscountTokenUpdatedEventFilter;
    DiscountTokenUpdated(
      oldDiscountToken?: string | null,
      newDiscountToken?: string | null,
    ): DiscountTokenUpdatedEventFilter;

    'Initialized(address,address,address,uint8,string,string,bytes)'(
      underlyingAsset?: string | null,
      pool?: string | null,
      incentivesController?: null,
      debtTokenDecimals?: null,
      debtTokenName?: null,
      debtTokenSymbol?: null,
      params?: null,
    ): InitializedEventFilter;
    Initialized(
      underlyingAsset?: string | null,
      pool?: string | null,
      incentivesController?: null,
      debtTokenDecimals?: null,
      debtTokenName?: null,
      debtTokenSymbol?: null,
      params?: null,
    ): InitializedEventFilter;

    'Mint(address,address,uint256,uint256,uint256)'(
      caller?: string | null,
      onBehalfOf?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): MintEventFilter;
    Mint(
      caller?: string | null,
      onBehalfOf?: string | null,
      value?: null,
      balanceIncrease?: null,
      index?: null,
    ): MintEventFilter;
  };

  estimateGas: {
    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDiscountRateStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    getDiscountToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      pool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UNDERLYING_ASSET_ADDRESS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decreaseBalanceFromInterest(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceFromInterest(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountLockPeriod(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountPercent(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountRateStrategy(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDiscountToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPreviousIndex(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getScaledUserBalanceAndSupply(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRebalanceTimestamp(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      pool: string,
      underlyingAsset: string,
      incentivesController: string,
      debtTokenDecimals: BigNumberish,
      debtTokenName: string,
      debtTokenSymbol: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      user: string,
      onBehalfOf: string,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rebalanceUserDiscountPercent(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    scaledBalanceOf(
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAToken(
      ghoAToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountDistribution(
      sender: string,
      recipient: string,
      senderDiscountTokenBalance: BigNumberish,
      recipientDiscountTokenBalance: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountLockPeriod(
      newLockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountRateStrategy(
      newDiscountRateStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDiscountToken(
      newDiscountToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
