/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakedTokenDataProviderInterface extends ethers.utils.Interface {
  functions: {
    "AAVE()": FunctionFragment;
    "AAVE_PRICE_FEED()": FunctionFragment;
    "BPT()": FunctionFragment;
    "BPT_PRICE_FEED()": FunctionFragment;
    "ETH_USD_PRICE_FEED()": FunctionFragment;
    "STAKED_AAVE()": FunctionFragment;
    "STAKED_BPT()": FunctionFragment;
    "getAllStakedTokenData()": FunctionFragment;
    "getAllStakedTokenUserData(address)": FunctionFragment;
    "getStkAaveData()": FunctionFragment;
    "getStkAaveUserData(address)": FunctionFragment;
    "getStkBptAaveUserData(address)": FunctionFragment;
    "getStkBptData()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "AAVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "AAVE_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "BPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BPT_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_USD_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKED_AAVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKED_BPT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStakedTokenData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStakedTokenUserData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStkAaveData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStkAaveUserData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStkBptAaveUserData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStkBptData",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "AAVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AAVE_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BPT_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_USD_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKED_AAVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STAKED_BPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllStakedTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStakedTokenUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStkAaveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStkAaveUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStkBptAaveUserData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStkBptData",
    data: BytesLike
  ): Result;

  events: {};
}

export class StakedTokenDataProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakedTokenDataProviderInterface;

  functions: {
    AAVE(overrides?: CallOverrides): Promise<[string]>;

    "AAVE()"(overrides?: CallOverrides): Promise<[string]>;

    AAVE_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    "AAVE_PRICE_FEED()"(overrides?: CallOverrides): Promise<[string]>;

    BPT(overrides?: CallOverrides): Promise<[string]>;

    "BPT()"(overrides?: CallOverrides): Promise<[string]>;

    BPT_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    "BPT_PRICE_FEED()"(overrides?: CallOverrides): Promise<[string]>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    "ETH_USD_PRICE_FEED()"(overrides?: CallOverrides): Promise<[string]>;

    STAKED_AAVE(overrides?: CallOverrides): Promise<[string]>;

    "STAKED_AAVE()"(overrides?: CallOverrides): Promise<[string]>;

    STAKED_BPT(overrides?: CallOverrides): Promise<[string]>;

    "STAKED_BPT()"(overrides?: CallOverrides): Promise<[string]>;

    getAllStakedTokenData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    "getAllStakedTokenData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    getAllStakedTokenUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    "getAllStakedTokenUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    getStkAaveData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
      }
    >;

    "getStkAaveData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
      }
    >;

    getStkAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    "getStkAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    getStkBptAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    "getStkBptAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    getStkBptData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
      }
    >;

    "getStkBptData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
      }
    >;
  };

  AAVE(overrides?: CallOverrides): Promise<string>;

  "AAVE()"(overrides?: CallOverrides): Promise<string>;

  AAVE_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  "AAVE_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

  BPT(overrides?: CallOverrides): Promise<string>;

  "BPT()"(overrides?: CallOverrides): Promise<string>;

  BPT_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  "BPT_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

  ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  "ETH_USD_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

  STAKED_AAVE(overrides?: CallOverrides): Promise<string>;

  "STAKED_AAVE()"(overrides?: CallOverrides): Promise<string>;

  STAKED_BPT(overrides?: CallOverrides): Promise<string>;

  "STAKED_BPT()"(overrides?: CallOverrides): Promise<string>;

  getAllStakedTokenData(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      BigNumber
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      ethPrice: BigNumber;
    }
  >;

  "getAllStakedTokenData()"(
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      BigNumber
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      ethPrice: BigNumber;
    }
  >;

  getAllStakedTokenUserData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      },
      BigNumber
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkAaveUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
      ethPrice: BigNumber;
    }
  >;

  "getAllStakedTokenUserData(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      },
      BigNumber
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkAaveUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
      ethPrice: BigNumber;
    }
  >;

  getStkAaveData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakedTokenTotalSupply: BigNumber;
      stakedTokenTotalRedeemableAmount: BigNumber;
      stakeCooldownSeconds: BigNumber;
      stakeUnstakeWindow: BigNumber;
      stakedTokenPriceEth: BigNumber;
      rewardTokenPriceEth: BigNumber;
      stakeApy: BigNumber;
      distributionPerSecond: BigNumber;
      distributionEnd: BigNumber;
    }
  >;

  "getStkAaveData()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakedTokenTotalSupply: BigNumber;
      stakedTokenTotalRedeemableAmount: BigNumber;
      stakeCooldownSeconds: BigNumber;
      stakeUnstakeWindow: BigNumber;
      stakedTokenPriceEth: BigNumber;
      rewardTokenPriceEth: BigNumber;
      stakeApy: BigNumber;
      distributionPerSecond: BigNumber;
      distributionEnd: BigNumber;
    }
  >;

  getStkAaveUserData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      }
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkAaveUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
    }
  >;

  "getStkAaveUserData(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      }
    ] & {
      stkAaveData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkAaveUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
    }
  >;

  getStkBptAaveUserData(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      }
    ] & {
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
    }
  >;

  "getStkBptAaveUserData(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      }
    ] & {
      stkBptData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      };
      stkBptUserData: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        stakedTokenUserBalance: BigNumber;
        stakedTokenRedeemableAmount: BigNumber;
        underlyingTokenUserBalance: BigNumber;
        rewardsToClaim: BigNumber;
        userCooldownTimestamp: number;
        userCooldownAmount: BigNumber;
      };
    }
  >;

  getStkBptData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakedTokenTotalSupply: BigNumber;
      stakedTokenTotalRedeemableAmount: BigNumber;
      stakeCooldownSeconds: BigNumber;
      stakeUnstakeWindow: BigNumber;
      stakedTokenPriceEth: BigNumber;
      rewardTokenPriceEth: BigNumber;
      stakeApy: BigNumber;
      distributionPerSecond: BigNumber;
      distributionEnd: BigNumber;
    }
  >;

  "getStkBptData()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakedTokenTotalSupply: BigNumber;
      stakedTokenTotalRedeemableAmount: BigNumber;
      stakeCooldownSeconds: BigNumber;
      stakeUnstakeWindow: BigNumber;
      stakedTokenPriceEth: BigNumber;
      rewardTokenPriceEth: BigNumber;
      stakeApy: BigNumber;
      distributionPerSecond: BigNumber;
      distributionEnd: BigNumber;
    }
  >;

  callStatic: {
    AAVE(overrides?: CallOverrides): Promise<string>;

    "AAVE()"(overrides?: CallOverrides): Promise<string>;

    AAVE_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    "AAVE_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

    BPT(overrides?: CallOverrides): Promise<string>;

    "BPT()"(overrides?: CallOverrides): Promise<string>;

    BPT_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    "BPT_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    "ETH_USD_PRICE_FEED()"(overrides?: CallOverrides): Promise<string>;

    STAKED_AAVE(overrides?: CallOverrides): Promise<string>;

    "STAKED_AAVE()"(overrides?: CallOverrides): Promise<string>;

    STAKED_BPT(overrides?: CallOverrides): Promise<string>;

    "STAKED_BPT()"(overrides?: CallOverrides): Promise<string>;

    getAllStakedTokenData(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    "getAllStakedTokenData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    getAllStakedTokenUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    "getAllStakedTokenUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        },
        BigNumber
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
        ethPrice: BigNumber;
      }
    >;

    getStkAaveData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    "getStkAaveData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    getStkAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    "getStkAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkAaveData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkAaveUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    getStkBptAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    "getStkBptAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        }
      ] & {
        stkBptData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          stakedTokenTotalSupply: BigNumber;
          stakedTokenTotalRedeemableAmount: BigNumber;
          stakeCooldownSeconds: BigNumber;
          stakeUnstakeWindow: BigNumber;
          stakedTokenPriceEth: BigNumber;
          rewardTokenPriceEth: BigNumber;
          stakeApy: BigNumber;
          distributionPerSecond: BigNumber;
          distributionEnd: BigNumber;
        };
        stkBptUserData: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber
        ] & {
          stakedTokenUserBalance: BigNumber;
          stakedTokenRedeemableAmount: BigNumber;
          underlyingTokenUserBalance: BigNumber;
          rewardsToClaim: BigNumber;
          userCooldownTimestamp: number;
          userCooldownAmount: BigNumber;
        };
      }
    >;

    getStkBptData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      }
    >;

    "getStkBptData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakedTokenTotalSupply: BigNumber;
        stakedTokenTotalRedeemableAmount: BigNumber;
        stakeCooldownSeconds: BigNumber;
        stakeUnstakeWindow: BigNumber;
        stakedTokenPriceEth: BigNumber;
        rewardTokenPriceEth: BigNumber;
        stakeApy: BigNumber;
        distributionPerSecond: BigNumber;
        distributionEnd: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    "AAVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    AAVE_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    "AAVE_PRICE_FEED()"(overrides?: CallOverrides): Promise<BigNumber>;

    BPT(overrides?: CallOverrides): Promise<BigNumber>;

    "BPT()"(overrides?: CallOverrides): Promise<BigNumber>;

    BPT_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    "BPT_PRICE_FEED()"(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_USD_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_USD_PRICE_FEED()"(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_AAVE(overrides?: CallOverrides): Promise<BigNumber>;

    "STAKED_AAVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_BPT(overrides?: CallOverrides): Promise<BigNumber>;

    "STAKED_BPT()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStakedTokenData(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllStakedTokenData()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllStakedTokenUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllStakedTokenUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStkAaveData(overrides?: CallOverrides): Promise<BigNumber>;

    "getStkAaveData()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStkAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStkAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStkBptAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStkBptAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStkBptData(overrides?: CallOverrides): Promise<BigNumber>;

    "getStkBptData()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AAVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AAVE_PRICE_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "AAVE_PRICE_FEED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BPT_PRICE_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPT_PRICE_FEED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_USD_PRICE_FEED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ETH_USD_PRICE_FEED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAKED_AAVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STAKED_AAVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKED_BPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STAKED_BPT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllStakedTokenData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllStakedTokenData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllStakedTokenUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllStakedTokenUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStkAaveData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStkAaveData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStkAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStkAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStkBptAaveUserData(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStkBptAaveUserData(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStkBptData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStkBptData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
