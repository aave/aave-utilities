/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { StakedTokenDataProvider } from "./StakedTokenDataProvider";

export class StakedTokenDataProvider__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    aave: string,
    stkAave: string,
    bpt: string,
    stkBpt: string,
    ethUsdPriceFeed: string,
    aavePriceFeed: string,
    bptPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakedTokenDataProvider> {
    return super.deploy(
      aave,
      stkAave,
      bpt,
      stkBpt,
      ethUsdPriceFeed,
      aavePriceFeed,
      bptPriceFeed,
      overrides || {}
    ) as Promise<StakedTokenDataProvider>;
  }
  getDeployTransaction(
    aave: string,
    stkAave: string,
    bpt: string,
    stkBpt: string,
    ethUsdPriceFeed: string,
    aavePriceFeed: string,
    bptPriceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      aave,
      stkAave,
      bpt,
      stkBpt,
      ethUsdPriceFeed,
      aavePriceFeed,
      bptPriceFeed,
      overrides || {}
    );
  }
  attach(address: string): StakedTokenDataProvider {
    return super.attach(address) as StakedTokenDataProvider;
  }
  connect(signer: Signer): StakedTokenDataProvider__factory {
    return super.connect(signer) as StakedTokenDataProvider__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakedTokenDataProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakedTokenDataProvider;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aave",
        type: "address",
      },
      {
        internalType: "address",
        name: "stkAave",
        type: "address",
      },
      {
        internalType: "address",
        name: "bpt",
        type: "address",
      },
      {
        internalType: "address",
        name: "stkBpt",
        type: "address",
      },
      {
        internalType: "address",
        name: "ethUsdPriceFeed",
        type: "address",
      },
      {
        internalType: "address",
        name: "aavePriceFeed",
        type: "address",
      },
      {
        internalType: "address",
        name: "bptPriceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AAVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "AAVE_PRICE_FEED",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BPT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BPT_PRICE_FEED",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ETH_USD_PRICE_FEED",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STAKED_AAVE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "STAKED_BPT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllStakedTokenData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkAaveData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkBptData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "ethPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAllStakedTokenUserData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkAaveData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsToClaim",
            type: "uint256",
          },
          {
            internalType: "uint40",
            name: "userCooldownTimestamp",
            type: "uint40",
          },
          {
            internalType: "uint216",
            name: "userCooldownAmount",
            type: "uint216",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenUserData",
        name: "stkAaveUserData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkBptData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsToClaim",
            type: "uint256",
          },
          {
            internalType: "uint40",
            name: "userCooldownTimestamp",
            type: "uint40",
          },
          {
            internalType: "uint216",
            name: "userCooldownAmount",
            type: "uint216",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenUserData",
        name: "stkBptUserData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "ethPrice",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStkAaveData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkAaveData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getStkAaveUserData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkAaveData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsToClaim",
            type: "uint256",
          },
          {
            internalType: "uint40",
            name: "userCooldownTimestamp",
            type: "uint40",
          },
          {
            internalType: "uint216",
            name: "userCooldownAmount",
            type: "uint216",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenUserData",
        name: "stkAaveUserData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getStkBptAaveUserData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkBptData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "underlyingTokenUserBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardsToClaim",
            type: "uint256",
          },
          {
            internalType: "uint40",
            name: "userCooldownTimestamp",
            type: "uint40",
          },
          {
            internalType: "uint216",
            name: "userCooldownAmount",
            type: "uint216",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenUserData",
        name: "stkBptUserData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStkBptData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "stakedTokenTotalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeCooldownSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeUnstakeWindow",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakedTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "rewardTokenPriceEth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakeApy",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "distributionPerSecond",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "distributionEnd",
            type: "uint256",
          },
        ],
        internalType: "struct IStakedTokenDataProvider.StakedTokenData",
        name: "stkBptData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "";
