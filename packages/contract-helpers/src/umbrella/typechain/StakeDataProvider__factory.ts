/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  StakeDataProvider,
  StakeDataProviderInterface,
} from './StakeDataProvider';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_umbrella',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
      {
        name: '_rewardsController',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
      {
        name: '_stataTokenFactory',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getStakeData',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeData[]',
        components: [
          {
            name: 'tokenAddress',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'name',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'symbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'price',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'totalSupply',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'underlyingTokenAddress',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'underlyingTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenSymbol',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'underlyingTokenDecimals',
            type: 'uint8',
            internalType: 'uint8',
          },
          {
            name: 'cooldownSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'unstakeWindowSeconds',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'underlyingIsStataToken',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'stataTokenData',
            type: 'tuple',
            internalType: 'struct StataTokenData',
            components: [
              {
                name: 'asset',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'assetName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'assetSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'aToken',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'aTokenName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'aTokenSymbol',
                type: 'string',
                internalType: 'string',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'tuple[]',
            internalType: 'struct Reward[]',
            components: [
              {
                name: 'rewardAddress',
                type: 'address',
                internalType: 'address',
              },
              {
                name: 'rewardName',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'rewardSymbol',
                type: 'string',
                internalType: 'string',
              },
              {
                name: 'decimals',
                type: 'uint8',
                internalType: 'uint8',
              },
              {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'maxEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'distributionEnd',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'currentEmissionPerSecond',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'apy',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getUserStakeData',
    inputs: [
      {
        name: 'user',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple[]',
        internalType: 'struct StakeUserData[]',
        components: [
          {
            name: 'stakeToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'stakeTokenName',
            type: 'string',
            internalType: 'string',
          },
          {
            name: 'balances',
            type: 'tuple',
            internalType: 'struct StakeUserBalances',
            components: [
              {
                name: 'stakeTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stakeTokenRedeemableAmount',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'underlyingTokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stataTokenAssetBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
              {
                name: 'stataTokenATokenBalance',
                type: 'uint256',
                internalType: 'uint256',
              },
            ],
          },
          {
            name: 'cooldown',
            type: 'tuple',
            internalType: 'struct StakeUserCooldown',
            components: [
              {
                name: 'cooldownAmount',
                type: 'uint192',
                internalType: 'uint192',
              },
              {
                name: 'endOfCooldown',
                type: 'uint32',
                internalType: 'uint32',
              },
              {
                name: 'withdrawalWindow',
                type: 'uint32',
                internalType: 'uint32',
              },
            ],
          },
          {
            name: 'rewards',
            type: 'address[]',
            internalType: 'address[]',
          },
          {
            name: 'rewardsAccrued',
            type: 'uint256[]',
            internalType: 'uint256[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'rewardsController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IRewardsController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'stataTokenFactory',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IStataTokenFactory',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'umbrella',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IUmbrellaStkManager',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x60e060405234801562000010575f80fd5b50604051620034dc380380620034dc8339818101604052810190620000369190620001d7565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000230565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200010a82620000df565b9050919050565b5f6200011d82620000fe565b9050919050565b6200012f8162000111565b81146200013a575f80fd5b50565b5f815190506200014d8162000124565b92915050565b5f6200015f82620000fe565b9050919050565b620001718162000153565b81146200017c575f80fd5b50565b5f815190506200018f8162000166565b92915050565b5f620001a182620000fe565b9050919050565b620001b38162000195565b8114620001be575f80fd5b50565b5f81519050620001d181620001a8565b92915050565b5f805f60608486031215620001f157620001f0620000db565b5b5f62000200868287016200013d565b935050602062000213868287016200017f565b92505060406200022686828701620001c1565b9150509250925092565b60805160a05160c0516132426200029a5f395f81816101030152818161025d0152610bf201525f818161012701528181610cca01528181610e6201528181610f81015261101e01525f818161014b01528181610172015281816103dd0152610b0701526132425ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631494088f146100595780636bb65f53146100775780638491426214610095578063a16a09af146100b3578063e9ce34a5146100d1575b5f80fd5b610061610101565b60405161006e9190611ef8565b60405180910390f35b61007f610125565b60405161008c9190611f31565b60405180910390f35b61009d610149565b6040516100aa9190611f6a565b60405180910390f35b6100bb61016d565b6040516100c891906124a2565b60405180910390f35b6100eb60048036038101906100e691906124fd565b610b02565b6040516100f891906128c0565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60605f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa1580156101d8573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906102009190612a34565b90505f815167ffffffffffffffff81111561021e5761021d6128e4565b5b60405190808252806020026020018201604052801561025757816020015b610244611c5d565b81526020019060019003908161023c5790505b5090505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102c3573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906102eb9190612a34565b90505f5b8351811015610af8575f84828151811061030c5761030b612a7b565b5b602002602001015190505f8190505f8273ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610364573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103889190612aa8565b90505f6103958484610e5d565b90505f6103a2838861131c565b90505f8073ffffffffffffffffffffffffffffffffffffffff16825f015173ffffffffffffffffffffffffffffffffffffffff16141590505f7f000000000000000000000000000000000000000000000000000000000000000090505f8173ffffffffffffffffffffffffffffffffffffffff166305046089846104265787610494565b8773ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104939190612aa8565b5b896040518363ffffffff1660e01b81526004016104b2929190612ae2565b608060405180830381865afa9250505080156104ec57506040513d601f19601f820116820180604052508101906104e99190612c11565b60015b1561056657806020015173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561053e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105629190612c6f565b9150505b604051806101c001604052808d8b8151811061058557610584612a7b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156105f0573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906106189190612d3c565b81526020018973ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015610665573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061068d9190612d3c565b81526020018281526020018973ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107059190612d83565b81526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107939190612aa8565b73ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156107da573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906108029190612d3c565b81526020018973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610850573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108749190612aa8565b73ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156108bb573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906108e39190612d3c565b81526020018973ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610931573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109559190612aa8565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109c19190612dd8565b60ff1681526020018973ffffffffffffffffffffffffffffffffffffffff1663218e4a156040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a12573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a369190612d83565b81526020018973ffffffffffffffffffffffffffffffffffffffff166390b9f9e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a84573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa89190612d83565b81526020018415158152602001858152602001868152508b8a81518110610ad257610ad1612a7b565b5b602002602001018190525050505050505050508080610af090612e30565b9150506102ef565b5081935050505090565b60605f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663de3767766040518163ffffffff1660e01b81526004015f60405180830381865afa158015610b6d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610b959190612a34565b90505f815167ffffffffffffffff811115610bb357610bb26128e4565b5b604051908082528060200260200182016040528015610bec57816020015b610bd9611cfb565b815260200190600190039081610bd15790505b5090505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663529080176040518163ffffffff1660e01b81526004015f60405180830381865afa158015610c58573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610c809190612a34565b90505f5b8351811015610e51575f848281518110610ca157610ca0612a7b565b5b602002602001015190505f610cb7888386611638565b90505f610cc489846118d0565b90505f807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff73bce0868d6040518363ffffffff1660e01b8152600401610d23929190612ae2565b5f60405180830381865afa158015610d3d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610d659190612f37565b915091506040518060c001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610dd8573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610e009190612d3c565b815260200185815260200184815260200183815260200182815250888781518110610e2e57610e2d612a7b565b5b602002602001018190525050505050508080610e4990612e30565b915050610c84565b50819350505050919050565b60605f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663362a3fad846040518263ffffffff1660e01b8152600401610eb99190612fad565b5f60405180830381865afa158015610ed3573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610efb9190612a34565b90505f815167ffffffffffffffff811115610f1957610f186128e4565b5b604051908082528060200260200182016040528015610f5257816020015b610f3f611d52565b815260200190600190039081610f375790505b5090505f5b8251811015611310575f838281518110610f7457610f73612a7b565b5b602002602001015190505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166369f67d4288846040518363ffffffff1660e01b8152600401610fda929190612ae2565b608060405180830381865afa158015610ff5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611019919061303b565b90505f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a11022089856040518363ffffffff1660e01b8152600401611077929190612ae2565b602060405180830381865afa158015611092573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110b69190612d83565b90506040518061012001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611128573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906111509190612d3c565b81526020018473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561119d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906111c59190612d3c565b81526020018473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611213573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112379190612dd8565b60ff1681526020018360200151815260200183604001518152602001836060015181526020018281526020016112d9838c73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d49190612d83565b6119a8565b8152508585815181106112ef576112ee612a7b565b5b6020026020010181905250505050808061130890612e30565b915050610f57565b50809250505092915050565b611324611db0565b61132e83836119e9565b15611632575f8390505f8173ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611381573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113a59190612aa8565b90505f8273ffffffffffffffffffffffffffffffffffffffff1663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114159190612aa8565b90506040518060c001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611486573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906114ae9190612d3c565b81526020018373ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156114fb573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906115239190612d3c565b81526020018273ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561158c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906115b49190612d3c565b81526020018273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611601573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906116299190612d3c565b81525093505050505b92915050565b611640611e10565b5f8373ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561168a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116ae9190612aa8565b90505f806116bd878487611a6d565b915091506040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016117059190612fad565b602060405180830381865afa158015611720573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117449190612d83565b81526020018773ffffffffffffffffffffffffffffffffffffffff16634cdad5068973ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b815260040161179e9190612fad565b602060405180830381865afa1580156117b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117dd9190612d83565b6040518263ffffffff1660e01b81526004016117f99190613075565b602060405180830381865afa158015611814573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118389190612d83565b81526020018473ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016118769190612fad565b602060405180830381865afa158015611891573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118b59190612d83565b81526020018381526020018281525093505050509392505050565b6118d8611e3a565b5f8273ffffffffffffffffffffffffffffffffffffffff16632f8a8f42856040518263ffffffff1660e01b81526004016119129190612fad565b606060405180830381865afa15801561192d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119519190613143565b90506040518060600160405280825f015177ffffffffffffffffffffffffffffffffffffffffffffffff168152602001826020015163ffffffff168152602001826040015163ffffffff1681525091505092915050565b5f8082036119b8575f90506119e3565b816127106301e13380856119cc919061316e565b6119d6919061316e565b6119e091906131dc565b90505b92915050565b5f805f90505b8251811015611a6257828181518110611a0b57611a0a612a7b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a4f576001915050611a67565b8080611a5a90612e30565b9150506119ef565b505f90505b92915050565b5f80611a7984846119e9565b15611c55575f8473ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ac8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611aec9190612aa8565b90505f8573ffffffffffffffffffffffffffffffffffffffff1663a0c1f15e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b5c9190612aa8565b90508173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401611b979190612fad565b602060405180830381865afa158015611bb2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bd69190612d83565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401611c119190612fad565b602060405180830381865afa158015611c2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c509190612d83565b925050505b935093915050565b604051806101c001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f60ff1681526020015f81526020015f81526020015f15158152602001611cee611db0565b8152602001606081525090565b6040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001611d31611e10565b8152602001611d3e611e3a565b815260200160608152602001606081525090565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f60ff1681526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081525090565b6040518060a001604052805f81526020015f81526020015f81526020015f81526020015f81525090565b60405180606001604052805f77ffffffffffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff1681526020015f63ffffffff1681525090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f611ec0611ebb611eb684611e7e565b611e9d565b611e7e565b9050919050565b5f611ed182611ea6565b9050919050565b5f611ee282611ec7565b9050919050565b611ef281611ed8565b82525050565b5f602082019050611f0b5f830184611ee9565b92915050565b5f611f1b82611ec7565b9050919050565b611f2b81611f11565b82525050565b5f602082019050611f445f830184611f22565b92915050565b5f611f5482611ec7565b9050919050565b611f6481611f4a565b82525050565b5f602082019050611f7d5f830184611f5b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f611fb682611e7e565b9050919050565b611fc681611fac565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612003578082015181840152602081019050611fe8565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61202882611fcc565b6120328185611fd6565b9350612042818560208601611fe6565b61204b8161200e565b840191505092915050565b5f819050919050565b61206881612056565b82525050565b5f60ff82169050919050565b6120838161206e565b82525050565b5f8115159050919050565b61209d81612089565b82525050565b5f60c083015f8301516120b85f860182611fbd565b50602083015184820360208601526120d0828261201e565b915050604083015184820360408601526120ea828261201e565b91505060608301516120ff6060860182611fbd565b5060808301518482036080860152612117828261201e565b91505060a083015184820360a0860152612131828261201e565b9150508091505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61012083015f83015161217d5f860182611fbd565b5060208301518482036020860152612195828261201e565b915050604083015184820360408601526121af828261201e565b91505060608301516121c4606086018261207a565b5060808301516121d7608086018261205f565b5060a08301516121ea60a086018261205f565b5060c08301516121fd60c086018261205f565b5060e083015161221060e086018261205f565b5061010083015161222561010086018261205f565b508091505092915050565b5f61223b8383612167565b905092915050565b5f602082019050919050565b5f6122598261213e565b6122638185612148565b93508360208202850161227585612158565b805f5b858110156122b057848403895281516122918582612230565b945061229c83612243565b925060208a01995050600181019050612278565b50829750879550505050505092915050565b5f6101c083015f8301516122d85f860182611fbd565b50602083015184820360208601526122f0828261201e565b9150506040830151848203604086015261230a828261201e565b915050606083015161231f606086018261205f565b506080830151612332608086018261205f565b5060a083015161234560a0860182611fbd565b5060c083015184820360c086015261235d828261201e565b91505060e083015184820360e0860152612377828261201e565b91505061010083015161238e61010086018261207a565b506101208301516123a361012086018261205f565b506101408301516123b861014086018261205f565b506101608301516123cd610160860182612094565b506101808301518482036101808601526123e782826120a3565b9150506101a08301518482036101a0860152612403828261224f565b9150508091505092915050565b5f61241b83836122c2565b905092915050565b5f602082019050919050565b5f61243982611f83565b6124438185611f8d565b93508360208202850161245585611f9d565b805f5b8581101561249057848403895281516124718582612410565b945061247c83612423565b925060208a01995050600181019050612458565b50829750879550505050505092915050565b5f6020820190508181035f8301526124ba818461242f565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b6124dc81611fac565b81146124e6575f80fd5b50565b5f813590506124f7816124d3565b92915050565b5f60208284031215612512576125116124cb565b5b5f61251f848285016124e9565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b60a082015f8201516125655f85018261205f565b506020820151612578602085018261205f565b50604082015161258b604085018261205f565b50606082015161259e606085018261205f565b5060808201516125b1608085018261205f565b50505050565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6125e3816125b7565b82525050565b5f63ffffffff82169050919050565b612601816125e9565b82525050565b606082015f82015161261b5f8501826125da565b50602082015161262e60208501826125f8565b50604082015161264160408501826125f8565b50505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61267b8383611fbd565b60208301905092915050565b5f602082019050919050565b5f61269d82612647565b6126a78185612651565b93506126b283612661565b805f5b838110156126e25781516126c98882612670565b97506126d483612687565b9250506001810190506126b5565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f612723838361205f565b60208301905092915050565b5f602082019050919050565b5f612745826126ef565b61274f81856126f9565b935061275a83612709565b805f5b8381101561278a5781516127718882612718565b975061277c8361272f565b92505060018101905061275d565b5085935050505092915050565b5f61018083015f8301516127ad5f860182611fbd565b50602083015184820360208601526127c5828261201e565b91505060408301516127da6040860182612551565b5060608301516127ed60e0860182612607565b5060808301518482036101408601526128068282612693565b91505060a0830151848203610160860152612821828261273b565b9150508091505092915050565b5f6128398383612797565b905092915050565b5f602082019050919050565b5f61285782612528565b6128618185612532565b93508360208202850161287385612542565b805f5b858110156128ae578484038952815161288f858261282e565b945061289a83612841565b925060208a01995050600181019050612876565b50829750879550505050505092915050565b5f6020820190508181035f8301526128d8818461284d565b905092915050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61291a8261200e565b810181811067ffffffffffffffff82111715612939576129386128e4565b5b80604052505050565b5f61294b6124c2565b90506129578282612911565b919050565b5f67ffffffffffffffff821115612976576129756128e4565b5b602082029050602081019050919050565b5f80fd5b5f81519050612999816124d3565b92915050565b5f6129b16129ac8461295c565b612942565b905080838252602082019050602084028301858111156129d4576129d3612987565b5b835b818110156129fd57806129e9888261298b565b8452602084019350506020810190506129d6565b5050509392505050565b5f82601f830112612a1b57612a1a6128e0565b5b8151612a2b84826020860161299f565b91505092915050565b5f60208284031215612a4957612a486124cb565b5b5f82015167ffffffffffffffff811115612a6657612a656124cf565b5b612a7284828501612a07565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612abd57612abc6124cb565b5b5f612aca8482850161298b565b91505092915050565b612adc81611fac565b82525050565b5f604082019050612af55f830185612ad3565b612b026020830184612ad3565b9392505050565b5f80fd5b5f612b1782611fac565b9050919050565b612b2781612b0d565b8114612b31575f80fd5b50565b5f81519050612b4281612b1e565b92915050565b612b5181612056565b8114612b5b575f80fd5b50565b5f81519050612b6c81612b48565b92915050565b612b7b81612089565b8114612b85575f80fd5b50565b5f81519050612b9681612b72565b92915050565b5f60808284031215612bb157612bb0612b09565b5b612bbb6080612942565b90505f612bca8482850161298b565b5f830152506020612bdd84828501612b34565b6020830152506040612bf184828501612b5e565b6040830152506060612c0584828501612b88565b60608301525092915050565b5f60808284031215612c2657612c256124cb565b5b5f612c3384828501612b9c565b91505092915050565b5f819050919050565b612c4e81612c3c565b8114612c58575f80fd5b50565b5f81519050612c6981612c45565b92915050565b5f60208284031215612c8457612c836124cb565b5b5f612c9184828501612c5b565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115612cb857612cb76128e4565b5b612cc18261200e565b9050602081019050919050565b5f612ce0612cdb84612c9e565b612942565b905082815260208101848484011115612cfc57612cfb612c9a565b5b612d07848285611fe6565b509392505050565b5f82601f830112612d2357612d226128e0565b5b8151612d33848260208601612cce565b91505092915050565b5f60208284031215612d5157612d506124cb565b5b5f82015167ffffffffffffffff811115612d6e57612d6d6124cf565b5b612d7a84828501612d0f565b91505092915050565b5f60208284031215612d9857612d976124cb565b5b5f612da584828501612b5e565b91505092915050565b612db78161206e565b8114612dc1575f80fd5b50565b5f81519050612dd281612dae565b92915050565b5f60208284031215612ded57612dec6124cb565b5b5f612dfa84828501612dc4565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612e3a82612056565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e6c57612e6b612e03565b5b600182019050919050565b5f67ffffffffffffffff821115612e9157612e906128e4565b5b602082029050602081019050919050565b5f612eb4612eaf84612e77565b612942565b90508083825260208201905060208402830185811115612ed757612ed6612987565b5b835b81811015612f005780612eec8882612b5e565b845260208401935050602081019050612ed9565b5050509392505050565b5f82601f830112612f1e57612f1d6128e0565b5b8151612f2e848260208601612ea2565b91505092915050565b5f8060408385031215612f4d57612f4c6124cb565b5b5f83015167ffffffffffffffff811115612f6a57612f696124cf565b5b612f7685828601612a07565b925050602083015167ffffffffffffffff811115612f9757612f966124cf565b5b612fa385828601612f0a565b9150509250929050565b5f602082019050612fc05f830184612ad3565b92915050565b5f60808284031215612fdb57612fda612b09565b5b612fe56080612942565b90505f612ff48482850161298b565b5f83015250602061300784828501612b5e565b602083015250604061301b84828501612b5e565b604083015250606061302f84828501612b5e565b60608301525092915050565b5f608082840312156130505761304f6124cb565b5b5f61305d84828501612fc6565b91505092915050565b61306f81612056565b82525050565b5f6020820190506130885f830184613066565b92915050565b613097816125b7565b81146130a1575f80fd5b50565b5f815190506130b28161308e565b92915050565b6130c1816125e9565b81146130cb575f80fd5b50565b5f815190506130dc816130b8565b92915050565b5f606082840312156130f7576130f6612b09565b5b6131016060612942565b90505f613110848285016130a4565b5f830152506020613123848285016130ce565b6020830152506040613137848285016130ce565b60408301525092915050565b5f60608284031215613158576131576124cb565b5b5f613165848285016130e2565b91505092915050565b5f61317882612056565b915061318383612056565b925082820261319181612056565b915082820484148315176131a8576131a7612e03565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131e682612056565b91506131f183612056565b925082613201576132006131af565b5b82820490509291505056fea2646970667358221220f965af0175839df35738312148058b43230ee5d20df95d694114c21111a8119964736f6c63430008140033';

type StakeDataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakeDataProviderConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakeDataProvider__factory extends ContractFactory {
  constructor(...args: StakeDataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string },
  ): Promise<StakeDataProvider> {
    return super.deploy(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {},
    ) as Promise<StakeDataProvider>;
  }
  override getDeployTransaction(
    _umbrella: string,
    _rewardsController: string,
    _stataTokenFactory: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _umbrella,
      _rewardsController,
      _stataTokenFactory,
      overrides || {},
    );
  }
  override attach(address: string): StakeDataProvider {
    return super.attach(address) as StakeDataProvider;
  }
  override connect(signer: Signer): StakeDataProvider__factory {
    return super.connect(signer) as StakeDataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakeDataProviderInterface {
    return new utils.Interface(_abi) as StakeDataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): StakeDataProvider {
    return new Contract(address, _abi, signerOrProvider) as StakeDataProvider;
  }
}
